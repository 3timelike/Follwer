{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nrequire('../../../../utils/index.js');\nrequire('../components/index.js');\nvar constants = require('../constants.js');\nvar _private = require('../private.js');\nvar utils = require('../utils.js');\nvar shared = require('@vue/shared');\nvar cell = require('../components/cell.js');\nvar expandIcon = require('../components/expand-icon.js');\nconst CellRenderer = ({\n  columns,\n  column,\n  columnIndex,\n  depth,\n  expandIconProps,\n  isScrolling,\n  rowData,\n  rowIndex,\n  style,\n  expandedRowKeys,\n  ns,\n  cellProps: _cellProps,\n  expandColumnKey,\n  indentSize,\n  iconSize,\n  rowKey\n}, {\n  slots\n}) => {\n  const cellStyle = utils.enforceUnit(style);\n  if (column.placeholderSign === _private.placeholderSign) {\n    return vue.createVNode(\"div\", {\n      \"class\": ns.em(\"row-cell\", \"placeholder\"),\n      \"style\": cellStyle\n    }, null);\n  }\n  const {\n    cellRenderer,\n    dataKey,\n    dataGetter\n  } = column;\n  const cellData = shared.isFunction(dataGetter) ? dataGetter({\n    columns,\n    column,\n    columnIndex,\n    rowData,\n    rowIndex\n  }) : lodashUnified.get(rowData, dataKey != null ? dataKey : \"\");\n  const extraCellProps = utils.tryCall(_cellProps, {\n    cellData,\n    columns,\n    column,\n    columnIndex,\n    rowIndex,\n    rowData\n  });\n  const cellProps = {\n    class: ns.e(\"cell-text\"),\n    columns,\n    column,\n    columnIndex,\n    cellData,\n    isScrolling,\n    rowData,\n    rowIndex\n  };\n  const columnCellRenderer = utils.componentToSlot(cellRenderer);\n  const Cell = columnCellRenderer ? columnCellRenderer(cellProps) : vue.renderSlot(slots, \"default\", cellProps, () => [vue.createVNode(cell[\"default\"], cellProps, null)]);\n  const kls = [ns.e(\"row-cell\"), column.class, column.align === constants.Alignment.CENTER && ns.is(\"align-center\"), column.align === constants.Alignment.RIGHT && ns.is(\"align-right\")];\n  const expandable = rowIndex >= 0 && expandColumnKey && column.key === expandColumnKey;\n  const expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey]);\n  let IconOrPlaceholder;\n  const iconStyle = `margin-inline-start: ${depth * indentSize}px;`;\n  if (expandable) {\n    if (shared.isObject(expandIconProps)) {\n      IconOrPlaceholder = vue.createVNode(expandIcon[\"default\"], vue.mergeProps(expandIconProps, {\n        \"class\": [ns.e(\"expand-icon\"), ns.is(\"expanded\", expanded)],\n        \"size\": iconSize,\n        \"expanded\": expanded,\n        \"style\": iconStyle,\n        \"expandable\": true\n      }), null);\n    } else {\n      IconOrPlaceholder = vue.createVNode(\"div\", {\n        \"style\": [iconStyle, `width: ${iconSize}px; height: ${iconSize}px;`].join(\" \")\n      }, null);\n    }\n  }\n  return vue.createVNode(\"div\", vue.mergeProps({\n    \"class\": kls,\n    \"style\": cellStyle\n  }, extraCellProps, {\n    \"role\": \"cell\"\n  }), [IconOrPlaceholder, Cell]);\n};\nCellRenderer.inheritAttrs = false;\nexports[\"default\"] = CellRenderer;","map":{"version":3,"names":["columns","column","columnIndex","depth","expandIconProps","isScrolling","rowData","rowIndex","style","expandedRowKeys","ns","cellProps","_cellProps","expandColumnKey","indentSize","iconSize","rowKey","slots","cellStyle","utils","enforceUnit","placeholderSign","_private","vue","createVNode","em","cellRenderer","dataGetter","lodashUnified","get","dataKey","extraCellProps","tryCall","cellData","class","e","columnCellRenderer","componentToSlot","Cell","renderSlot","cell","kls","align","constants","Alignment","CENTER","is","RIGHT","expandable","key","expanded","includes","IconOrPlaceholder","iconStyle","shared","isObject","expandIcon","mergeProps","join"],"sources":["../../../../../../../packages/components/table-v2/src/renderers/cell.tsx"],"sourcesContent":["import { renderSlot } from 'vue'\nimport { get } from 'lodash-unified'\nimport { isFunction, isObject } from '@element-plus/utils'\nimport { ExpandIcon, TableCell } from '../components'\nimport { Alignment } from '../constants'\nimport { placeholderSign } from '../private'\nimport { componentToSlot, enforceUnit, tryCall } from '../utils'\n\nimport type { FunctionalComponent, UnwrapNestedRefs, VNode } from 'vue'\nimport type { TableV2RowCellRenderParam } from '../components'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { UseTableReturn } from '../use-table'\nimport type { TableV2Props } from '../table'\n\ntype CellRendererProps = TableV2RowCellRenderParam &\n  Pick<\n    TableV2Props,\n    'cellProps' | 'expandColumnKey' | 'indentSize' | 'iconSize' | 'rowKey'\n  > &\n  UnwrapNestedRefs<Pick<UseTableReturn, 'expandedRowKeys'>> & {\n    ns: UseNamespaceReturn\n  }\n\nconst CellRenderer: FunctionalComponent<CellRendererProps> = (\n  {\n    // renderer props\n    columns,\n    column,\n    columnIndex,\n    depth,\n    expandIconProps,\n    isScrolling,\n    rowData,\n    rowIndex,\n    // from use-table\n    style,\n    expandedRowKeys,\n    ns,\n    // derived props\n    cellProps: _cellProps,\n    expandColumnKey,\n    indentSize,\n    iconSize,\n    rowKey,\n  },\n  { slots }\n) => {\n  const cellStyle = enforceUnit(style)\n\n  if (column.placeholderSign === placeholderSign) {\n    return <div class={ns.em('row-cell', 'placeholder')} style={cellStyle} />\n  }\n  const { cellRenderer, dataKey, dataGetter } = column\n\n  const cellData = isFunction(dataGetter)\n    ? dataGetter({ columns, column, columnIndex, rowData, rowIndex })\n    : get(rowData, dataKey ?? '')\n\n  const extraCellProps = tryCall(_cellProps, {\n    cellData,\n    columns,\n    column,\n    columnIndex,\n    rowIndex,\n    rowData,\n  })\n\n  const cellProps = {\n    class: ns.e('cell-text'),\n    columns,\n    column,\n    columnIndex,\n    cellData,\n    isScrolling,\n    rowData,\n    rowIndex,\n  }\n  const columnCellRenderer = componentToSlot<typeof cellProps>(cellRenderer)\n  const Cell = columnCellRenderer\n    ? columnCellRenderer(cellProps)\n    : renderSlot(slots, 'default', cellProps, () => [\n        <TableCell {...cellProps}></TableCell>,\n      ])\n\n  const kls = [\n    ns.e('row-cell'),\n    column.class,\n    column.align === Alignment.CENTER && ns.is('align-center'),\n    column.align === Alignment.RIGHT && ns.is('align-right'),\n  ]\n\n  const expandable =\n    rowIndex >= 0 && expandColumnKey && column.key === expandColumnKey\n  const expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey])\n\n  let IconOrPlaceholder: VNode | undefined\n  const iconStyle = `margin-inline-start: ${depth * indentSize}px;`\n  if (expandable) {\n    if (isObject(expandIconProps)) {\n      IconOrPlaceholder = (\n        <ExpandIcon\n          {...expandIconProps}\n          class={[ns.e('expand-icon'), ns.is('expanded', expanded)]}\n          size={iconSize}\n          expanded={expanded}\n          style={iconStyle}\n          expandable\n        />\n      )\n    } else {\n      IconOrPlaceholder = (\n        <div\n          style={[\n            iconStyle,\n            `width: ${iconSize}px; height: ${iconSize}px;`,\n          ].join(' ')}\n        />\n      )\n    }\n  }\n\n  return (\n    <div class={kls} style={cellStyle} {...extraCellProps} role=\"cell\">\n      {IconOrPlaceholder}\n      {Cell}\n    </div>\n  )\n}\n\nCellRenderer.inheritAttrs = false\n\nexport default CellRenderer\n"],"mappings":";;;;;;;;;;;;;;;;EAuBMA,OAAA;EAEFC,MAAA;EACAC,WAFF;EAGEC,KAHF;EAIEC,eAJF;EAKEC,WALF;EAMEC,OANF;EAOEC,QAPF;EAQEC,KARF;EASEC,eATF;EAUEC,EAAA;EACAC,SAXF,EAAAC,UAAA;EAYEC,eAZF;EAaEC,UAbF;EAcEC,QAAA;EACAC;GAfF;EAiBEC;MAjBF;EAmBE,MAAAC,SAAA,GAAAC,KAAA,CAAAC,WAAA,CAAAZ,KAAA;EAEF,IAAAP,MAAA,CAAAoB,eAAA,KAAAC,QAAA,CAAAD,eAAA;IAAE,OAAAE,GAAA,CAAAC,WAAA;MACC,SAAAd,EAAA,CAAAe,EAAA;MACH,OAAe,EAAAP;;EAEf;EACE;IAAAQ,YAAA;WAA4D;IAA5DC;EACD,IAAA1B,MAAA;;IACKD,OAAA;IAAEC,MAAF;IAAgBC,WAAhB;IAAyBI,OAAA;IAAzBC;GAEA,IAAAqB,aAAA,CAAAC,GAAA,CAAAvB,OAAA,EAAqBwB,OAAA,WAAAA,OAAA;QACZC,cAAA,GAAAZ,KAAA,CAAAa,OAAA,CAAApB,UAAA;IAAWqB,QAAX;IAAmBjC,OAAnB;IAAgCC,MAAhC;IAAyCC,WAAA;IADvCK,QAAA;IAIjBD;IACE;QADyCK,SAAA;IAGzCuB,KAHyC,EAAAxB,EAAA,CAAAyB,CAAA;IAIzCnC,OAJyC;IAKzCC,MALyC;IAMzCC,WAAA;IANF+B,QAAA;IASA5B,WAAA;IACEC,OAAO;IACPC;;QAFgB6B,kBAAA,GAAAjB,KAAA,CAAAkB,eAAA,CAAAX,YAAA;QAAAY,IAAA,GAAAF,kBAAA,GAAAA,kBAAA,CAAAzB,SAAA,IAAAY,GAAA,CAAAgB,UAAA,CAAAtB,KAAA,aAAAN,SAAA,SAAAY,GAAA,CAAAC,WAAA,CAAAgB,IAAA,aAAA7B,SAAA;QAAA8B,GAAA,IAAA/B,EAAA,CAAAyB,CAAA,cAAAlC,MAAA,CAAAiC,KAAA,EAAAjC,MAAA,CAAAyC,KAAA,KAAAC,SAAA,CAAAC,SAAA,CAAAC,MAAA,IAAAnC,EAAA,CAAAoC,EAAA,kBAAA7C,MAAA,CAAAyC,KAAA,KAAAC,SAAA,CAAAC,SAAA,CAAAG,KAAA,IAAArC,EAAA,CAAAoC,EAAA;QAAAE,UAAA,GAAAzC,QAAA,SAAAM,eAAA,IAAAZ,MAAA,CAAAgD,GAAA,KAAApC,eAAA;EAQhB,MAAAqC,QAAA,GAAA3C,QAAA,SAAAE,eAAA,CAAA0C,QAAA,CAAA7C,OAAA,CAAAU,MAAA;EARgB,IAAlBoC,iBAAA;EAUA,MAAMC,SAAkB,2BAAkBlD,KAAA,GAAAW,UAA1C;EACA,IAAMkC,UAAyB;IAM/B,IAAMM,MAAA,CAAAC,QAAA,CACFnD,eAAA,CACF,EAAM;MAKRgD,iBACU,GAAA7B,GAAA,CAAAC,WAAS,CAAjBgC,UAAA,aAAAjC,GAAA,CAAAkC,UAA0C,CAAArD,eAD5C;QAEM,OAAQ,GAAAM,EAAW,CAAAyB,CAAA,cAAS,GAAAzB,EAAA,CAAAoC,EAAA,WAAgB,EAAAI,QAAS;QAE3D,QAAAnC,QAAA;QACM,UAAa,EAAAmC,QAAA;;QACnB,YAAgB;MACd,EAAI,EAAQ;IACV;MAAiBE,iBAGA,GAAA7B,GAAA,CAAAC,WAAN,CAAsB,OAAM;QAHtB,UAAA6B,SAAA,YAAAtC,QAAA,eAAAA,QAAA,OAAA2C,IAAA;MAAA;IAAA;EAAA;SAAjBnC,GAAA,CAAAC,WAAA,QAAAD,GAAA,CAAAkC,UAAA;IAUD,OAAM,EAAAhB,GAAA;WACY,EAAAvB;mBAEN;UAFX;EAQD,KAAAkC,iBAAA,EAAAd,IAAA;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}