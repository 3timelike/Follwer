{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar core = require('@vueuse/core');\nrequire('../../../hooks/index.js');\nrequire('../../../utils/index.js');\nvar anchor = require('./anchor.js');\nvar constants = require('./constants.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar element = require('../../../utils/dom/element.js');\nvar scroll = require('../../../utils/dom/scroll.js');\nvar position = require('../../../utils/dom/position.js');\nvar throttleByRaf = require('../../../utils/throttleByRaf.js');\nvar types = require('../../../utils/types.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElAnchor\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: anchor.anchorProps,\n  emits: anchor.anchorEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const currentAnchor = vue.ref(\"\");\n    const anchorRef = vue.ref(null);\n    const markerRef = vue.ref(null);\n    const containerEl = vue.ref();\n    const links = {};\n    let isScrolling = false;\n    let currentScrollTop = 0;\n    const ns = index.useNamespace(\"anchor\");\n    const cls = vue.computed(() => [ns.b(), props.type === \"underline\" ? ns.m(\"underline\") : \"\", ns.m(props.direction)]);\n    const addLink = state => {\n      links[state.href] = state.el;\n    };\n    const removeLink = href => {\n      delete links[href];\n    };\n    const setCurrentAnchor = href => {\n      const activeHref = currentAnchor.value;\n      if (activeHref !== href) {\n        currentAnchor.value = href;\n        emit(\"change\", href);\n      }\n    };\n    let clearAnimate = null;\n    const scrollToAnchor = href => {\n      if (!containerEl.value) return;\n      const target = element.getElement(href);\n      if (!target) return;\n      if (clearAnimate) clearAnimate();\n      isScrolling = true;\n      const scrollEle = scroll.getScrollElement(target, containerEl.value);\n      const distance = position.getOffsetTopDistance(target, scrollEle);\n      const max = scrollEle.scrollHeight - scrollEle.clientHeight;\n      const to = Math.min(distance - props.offset, max);\n      clearAnimate = scroll.animateScrollTo(containerEl.value, currentScrollTop, to, props.duration, () => {\n        setTimeout(() => {\n          isScrolling = false;\n        }, 20);\n      });\n    };\n    const scrollTo = href => {\n      if (href) {\n        setCurrentAnchor(href);\n        scrollToAnchor(href);\n      }\n    };\n    const handleClick = (e, href) => {\n      emit(\"click\", e, href);\n      scrollTo(href);\n    };\n    const handleScroll = throttleByRaf.throttleByRaf(() => {\n      if (containerEl.value) {\n        currentScrollTop = scroll.getScrollTop(containerEl.value);\n      }\n      const currentHref = getCurrentHref();\n      if (isScrolling || types.isUndefined(currentHref)) return;\n      setCurrentAnchor(currentHref);\n    });\n    const getCurrentHref = () => {\n      if (!containerEl.value) return;\n      const scrollTop = scroll.getScrollTop(containerEl.value);\n      const anchorTopList = [];\n      for (const href of Object.keys(links)) {\n        const target = element.getElement(href);\n        if (!target) continue;\n        const scrollEle = scroll.getScrollElement(target, containerEl.value);\n        const distance = position.getOffsetTopDistance(target, scrollEle);\n        anchorTopList.push({\n          top: distance - props.offset - props.bound,\n          href\n        });\n      }\n      anchorTopList.sort((prev, next) => prev.top - next.top);\n      for (let i = 0; i < anchorTopList.length; i++) {\n        const item = anchorTopList[i];\n        const next = anchorTopList[i + 1];\n        if (i === 0 && scrollTop === 0) {\n          return \"\";\n        }\n        if (item.top <= scrollTop && (!next || next.top > scrollTop)) {\n          return item.href;\n        }\n      }\n    };\n    const getContainer = () => {\n      const el = element.getElement(props.container);\n      if (!el || types.isWindow(el)) {\n        containerEl.value = window;\n      } else {\n        containerEl.value = el;\n      }\n    };\n    core.useEventListener(containerEl, \"scroll\", handleScroll);\n    const markerStyle = vue.computed(() => {\n      if (!anchorRef.value || !markerRef.value || !currentAnchor.value) return {};\n      const currentLinkEl = links[currentAnchor.value];\n      if (!currentLinkEl) return {};\n      const anchorRect = anchorRef.value.getBoundingClientRect();\n      const markerRect = markerRef.value.getBoundingClientRect();\n      const linkRect = currentLinkEl.getBoundingClientRect();\n      if (props.direction === \"horizontal\") {\n        const left = linkRect.left - anchorRect.left;\n        return {\n          left: `${left}px`,\n          width: `${linkRect.width}px`,\n          opacity: 1\n        };\n      } else {\n        const top = linkRect.top - anchorRect.top + (linkRect.height - markerRect.height) / 2;\n        return {\n          top: `${top}px`,\n          opacity: 1\n        };\n      }\n    });\n    vue.onMounted(() => {\n      getContainer();\n      const hash = decodeURIComponent(window.location.hash);\n      const target = element.getElement(hash);\n      if (target) {\n        scrollTo(hash);\n      } else {\n        handleScroll();\n      }\n    });\n    vue.watch(() => props.container, () => {\n      getContainer();\n    });\n    vue.provide(constants.anchorKey, {\n      ns,\n      direction: props.direction,\n      currentAnchor,\n      addLink,\n      removeLink,\n      handleClick\n    });\n    expose({\n      scrollTo\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        ref_key: \"anchorRef\",\n        ref: anchorRef,\n        class: vue.normalizeClass(vue.unref(cls))\n      }, [_ctx.marker ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 0,\n        ref_key: \"markerRef\",\n        ref: markerRef,\n        class: vue.normalizeClass(vue.unref(ns).e(\"marker\")),\n        style: vue.normalizeStyle(vue.unref(markerStyle))\n      }, null, 6)) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"div\", {\n        class: vue.normalizeClass(vue.unref(ns).e(\"list\"))\n      }, [vue.renderSlot(_ctx.$slots, \"default\")], 2)], 2);\n    };\n  }\n});\nvar Anchor = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"anchor.vue\"]]);\nexports[\"default\"] = Anchor;","map":{"version":3,"names":["name","currentAnchor","vue","ref","anchorRef","markerRef","containerEl","links","isScrolling","currentScrollTop","ns","index","useNamespace","cls","computed","b","props","type","m","direction","addLink","state","href","el","removeLink","setCurrentAnchor","activeHref","value","emit","clearAnimate","scrollToAnchor","target","element","getElement","scrollEle","scroll","getScrollElement","distance","position","getOffsetTopDistance","max","scrollHeight","clientHeight","to","Math","min","offset","animateScrollTo","duration","setTimeout","scrollTo","handleClick","e","handleScroll","throttleByRaf","getScrollTop","currentHref","getCurrentHref","types","isUndefined","scrollTop","anchorTopList","Object","keys","push","top","bound","sort","prev","next","i","length","item","getContainer","container","isWindow","window","core","useEventListener","markerStyle","currentLinkEl","anchorRect","getBoundingClientRect","markerRect","linkRect","left","width","opacity","height","onMounted","hash","decodeURIComponent","location","watch","provide","constants","anchorKey","expose"],"sources":["../../../../../../packages/components/anchor/src/anchor.vue"],"sourcesContent":["<template>\n  <div ref=\"anchorRef\" :class=\"cls\">\n    <div\n      v-if=\"marker\"\n      ref=\"markerRef\"\n      :class=\"ns.e('marker')\"\n      :style=\"markerStyle\"\n    />\n    <div :class=\"ns.e('list')\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, onMounted, provide, ref, watch } from 'vue'\nimport { useEventListener } from '@vueuse/core'\nimport { useNamespace } from '@element-plus/hooks'\nimport {\n  animateScrollTo,\n  getElement,\n  getOffsetTopDistance,\n  getScrollElement,\n  getScrollTop,\n  isUndefined,\n  isWindow,\n  throttleByRaf,\n} from '@element-plus/utils'\nimport { anchorEmits, anchorProps } from './anchor'\nimport { anchorKey } from './constants'\n\nimport type { AnchorLinkState } from './constants'\n\ndefineOptions({\n  name: 'ElAnchor',\n})\n\nconst props = defineProps(anchorProps)\nconst emit = defineEmits(anchorEmits)\n\nconst currentAnchor = ref('')\nconst anchorRef = ref<HTMLElement | null>(null)\nconst markerRef = ref<HTMLElement | null>(null)\nconst containerEl = ref<HTMLElement | Window>()\n\nconst links: Record<string, HTMLElement> = {}\nlet isScrolling = false\nlet currentScrollTop = 0\n\nconst ns = useNamespace('anchor')\n\nconst cls = computed(() => [\n  ns.b(),\n  props.type === 'underline' ? ns.m('underline') : '',\n  ns.m(props.direction),\n])\n\nconst addLink = (state: AnchorLinkState) => {\n  links[state.href] = state.el\n}\n\nconst removeLink = (href: string) => {\n  delete links[href]\n}\n\nconst setCurrentAnchor = (href: string) => {\n  const activeHref = currentAnchor.value\n  if (activeHref !== href) {\n    currentAnchor.value = href\n    emit('change', href)\n  }\n}\n\nlet clearAnimate: (() => void) | null = null\n\nconst scrollToAnchor = (href: string) => {\n  if (!containerEl.value) return\n  const target = getElement(href)\n  if (!target) return\n  if (clearAnimate) clearAnimate()\n  isScrolling = true\n  const scrollEle = getScrollElement(target, containerEl.value)\n  const distance = getOffsetTopDistance(target, scrollEle)\n  const max = scrollEle.scrollHeight - scrollEle.clientHeight\n  const to = Math.min(distance - props.offset, max)\n  clearAnimate = animateScrollTo(\n    containerEl.value,\n    currentScrollTop,\n    to,\n    props.duration,\n    () => {\n      // make sure it is executed after throttleByRaf's handleScroll\n      setTimeout(() => {\n        isScrolling = false\n      }, 20)\n    }\n  )\n}\n\nconst scrollTo = (href?: string) => {\n  if (href) {\n    setCurrentAnchor(href)\n    scrollToAnchor(href)\n  }\n}\n\nconst handleClick = (e: MouseEvent, href?: string) => {\n  emit('click', e, href)\n  scrollTo(href)\n}\n\nconst handleScroll = throttleByRaf(() => {\n  if (containerEl.value) {\n    currentScrollTop = getScrollTop(containerEl.value)\n  }\n  const currentHref = getCurrentHref()\n  if (isScrolling || isUndefined(currentHref)) return\n  setCurrentAnchor(currentHref)\n})\n\nconst getCurrentHref = () => {\n  if (!containerEl.value) return\n  const scrollTop = getScrollTop(containerEl.value)\n  const anchorTopList: { top: number; href: string }[] = []\n\n  for (const href of Object.keys(links)) {\n    const target = getElement(href)\n    if (!target) continue\n    const scrollEle = getScrollElement(target, containerEl.value)\n    const distance = getOffsetTopDistance(target, scrollEle)\n    anchorTopList.push({\n      top: distance - props.offset - props.bound,\n      href,\n    })\n  }\n  anchorTopList.sort((prev, next) => prev.top - next.top)\n\n  for (let i = 0; i < anchorTopList.length; i++) {\n    const item = anchorTopList[i]\n    const next = anchorTopList[i + 1]\n\n    if (i === 0 && scrollTop === 0) {\n      return ''\n    }\n    if (item.top <= scrollTop && (!next || next.top > scrollTop)) {\n      return item.href\n    }\n  }\n}\n\nconst getContainer = () => {\n  const el = getElement(props.container)\n  if (!el || isWindow(el)) {\n    containerEl.value = window\n  } else {\n    containerEl.value = el\n  }\n}\n\nuseEventListener(containerEl, 'scroll', handleScroll)\n\nconst markerStyle = computed(() => {\n  if (!anchorRef.value || !markerRef.value || !currentAnchor.value) return {}\n  const currentLinkEl = links[currentAnchor.value]\n  if (!currentLinkEl) return {}\n  const anchorRect = anchorRef.value.getBoundingClientRect()\n  const markerRect = markerRef.value.getBoundingClientRect()\n  const linkRect = currentLinkEl.getBoundingClientRect()\n\n  if (props.direction === 'horizontal') {\n    const left = linkRect.left - anchorRect.left\n    return {\n      left: `${left}px`,\n      width: `${linkRect.width}px`,\n      opacity: 1,\n    }\n  } else {\n    const top =\n      linkRect.top - anchorRect.top + (linkRect.height - markerRect.height) / 2\n    return {\n      top: `${top}px`,\n      opacity: 1,\n    }\n  }\n})\n\nonMounted(() => {\n  getContainer()\n  const hash = decodeURIComponent(window.location.hash)\n  const target = getElement(hash)\n  if (target) {\n    scrollTo(hash)\n  } else {\n    handleScroll()\n  }\n})\n\nwatch(\n  () => props.container,\n  () => {\n    getContainer()\n  }\n)\n\nprovide(anchorKey, {\n  ns,\n  direction: props.direction,\n  currentAnchor,\n  addLink,\n  removeLink,\n  handleClick,\n})\n\ndefineExpose({\n  scrollTo,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}