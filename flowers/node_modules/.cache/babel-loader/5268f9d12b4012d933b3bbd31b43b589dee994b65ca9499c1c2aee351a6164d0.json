{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nrequire('../../../utils/index.js');\nrequire('../../virtual-list/index.js');\nrequire('../../../hooks/index.js');\nrequire('../../../constants/index.js');\nvar groupItem = require('./group-item.js');\nvar optionItem = require('./option-item.js');\nvar useProps = require('./useProps.js');\nvar token = require('./token.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar types = require('../../../utils/types.js');\nvar shared = require('@vue/shared');\nvar aria = require('../../../constants/aria.js');\nvar fixedSizeList = require('../../virtual-list/src/components/fixed-size-list.js');\nvar dynamicSizeList = require('../../virtual-list/src/components/dynamic-size-list.js');\nvar ElSelectMenu = vue.defineComponent({\n  name: \"ElSelectDropdown\",\n  props: {\n    loading: Boolean,\n    data: {\n      type: Array,\n      required: true\n    },\n    hoveringIndex: Number,\n    width: Number\n  },\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const select = vue.inject(token.selectV2InjectionKey);\n    const ns = index.useNamespace(\"select\");\n    const {\n      getLabel,\n      getValue,\n      getDisabled\n    } = useProps.useProps(select.props);\n    const cachedHeights = vue.ref([]);\n    const listRef = vue.ref();\n    const size = vue.computed(() => props.data.length);\n    vue.watch(() => size.value, () => {\n      var _a, _b;\n      (_b = (_a = select.tooltipRef.value).updatePopper) == null ? void 0 : _b.call(_a);\n    });\n    const isSized = vue.computed(() => types.isUndefined(select.props.estimatedOptionHeight));\n    const listProps = vue.computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight\n        };\n      }\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: idx => cachedHeights.value[idx]\n      };\n    });\n    const contains = (arr = [], target) => {\n      const {\n        props: {\n          valueKey\n        }\n      } = select;\n      if (!shared.isObject(target)) {\n        return arr.includes(target);\n      }\n      return arr && arr.some(item => {\n        return vue.toRaw(lodashUnified.get(item, valueKey)) === lodashUnified.get(target, valueKey);\n      });\n    };\n    const isEqual = (selected, target) => {\n      if (!shared.isObject(target)) {\n        return selected === target;\n      } else {\n        const {\n          valueKey\n        } = select.props;\n        return lodashUnified.get(selected, valueKey) === lodashUnified.get(target, valueKey);\n      }\n    };\n    const isItemSelected = (modelValue, target) => {\n      if (select.props.multiple) {\n        return contains(modelValue, getValue(target));\n      }\n      return isEqual(modelValue, getValue(target));\n    };\n    const isItemDisabled = (modelValue, selected) => {\n      const {\n        disabled,\n        multiple,\n        multipleLimit\n      } = select.props;\n      return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);\n    };\n    const isItemHovering = target => props.hoveringIndex === target;\n    const scrollToItem = index => {\n      const list = listRef.value;\n      if (list) {\n        list.scrollToItem(index);\n      }\n    };\n    const resetScrollTop = () => {\n      const list = listRef.value;\n      if (list) {\n        list.resetScrollTop();\n      }\n    };\n    expose({\n      listRef,\n      isSized,\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop\n    });\n    const Item = itemProps => {\n      const {\n        index,\n        data,\n        style\n      } = itemProps;\n      const sized = vue.unref(isSized);\n      const {\n        itemSize,\n        estimatedSize\n      } = vue.unref(listProps);\n      const {\n        modelValue\n      } = select.props;\n      const {\n        onSelect,\n        onHover\n      } = select;\n      const item = data[index];\n      if (item.type === \"Group\") {\n        return vue.createVNode(groupItem[\"default\"], {\n          \"item\": item,\n          \"style\": style,\n          \"height\": sized ? itemSize : estimatedSize\n        }, null);\n      }\n      const isSelected = isItemSelected(modelValue, item);\n      const isDisabled = isItemDisabled(modelValue, isSelected);\n      const isHovering = isItemHovering(index);\n      return vue.createVNode(optionItem[\"default\"], vue.mergeProps(itemProps, {\n        \"selected\": isSelected,\n        \"disabled\": getDisabled(item) || isDisabled,\n        \"created\": !!item.created,\n        \"hovering\": isHovering,\n        \"item\": item,\n        \"onSelect\": onSelect,\n        \"onHover\": onHover\n      }), {\n        default: props2 => {\n          var _a;\n          return ((_a = slots.default) == null ? void 0 : _a.call(slots, props2)) || vue.createVNode(\"span\", null, [getLabel(item)]);\n        }\n      });\n    };\n    const {\n      onKeyboardNavigate,\n      onKeyboardSelect\n    } = select;\n    const onForward = () => {\n      onKeyboardNavigate(\"forward\");\n    };\n    const onBackward = () => {\n      onKeyboardNavigate(\"backward\");\n    };\n    const onEscOrTab = () => {\n      select.expanded = false;\n    };\n    const onKeydown = e => {\n      const {\n        code\n      } = e;\n      const {\n        tab,\n        esc,\n        down,\n        up,\n        enter\n      } = aria.EVENT_CODE;\n      if (code !== tab) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      switch (code) {\n        case tab:\n        case esc:\n          {\n            onEscOrTab();\n            break;\n          }\n        case down:\n          {\n            onForward();\n            break;\n          }\n        case up:\n          {\n            onBackward();\n            break;\n          }\n        case enter:\n          {\n            onKeyboardSelect();\n            break;\n          }\n      }\n    };\n    return () => {\n      var _a, _b, _c, _d;\n      const {\n        data,\n        width\n      } = props;\n      const {\n        height,\n        multiple,\n        scrollbarAlwaysOn\n      } = select.props;\n      const List = vue.unref(isSized) ? fixedSizeList[\"default\"] : dynamicSizeList[\"default\"];\n      return vue.createVNode(\"div\", {\n        \"class\": [ns.b(\"dropdown\"), ns.is(\"multiple\", multiple)],\n        \"style\": {\n          width: `${width}px`\n        }\n      }, [(_a = slots.header) == null ? void 0 : _a.call(slots), ((_b = slots.loading) == null ? void 0 : _b.call(slots)) || ((_c = slots.empty) == null ? void 0 : _c.call(slots)) || vue.createVNode(List, vue.mergeProps({\n        \"ref\": listRef\n      }, vue.unref(listProps), {\n        \"className\": ns.be(\"dropdown\", \"list\"),\n        \"scrollbarAlwaysOn\": scrollbarAlwaysOn,\n        \"data\": data,\n        \"height\": height,\n        \"width\": width,\n        \"total\": data.length,\n        \"onKeydown\": onKeydown\n      }), {\n        default: props2 => vue.createVNode(Item, props2, null)\n      }), (_d = slots.footer) == null ? void 0 : _d.call(slots)]);\n    };\n  }\n});\nexports[\"default\"] = ElSelectMenu;","map":{"version":3,"names":["ElSelectMenu","vue","defineComponent","name","props","loading","Boolean","data","type","Array","required","hoveringIndex","Number","width","slots","expose","select","inject","token","selectV2InjectionKey","ns","index","useNamespace","getLabel","getValue","getDisabled","useProps","cachedHeights","ref","listRef","size","computed","length","watch","value","_a","_b","tooltipRef","updatePopper","call","isSized","types","isUndefined","estimatedOptionHeight","listProps","itemSize","itemHeight","estimatedSize","idx","contains","arr","target","valueKey","shared","isObject","includes","some","item","toRaw","lodashUnified","get","isEqual","selected","isItemSelected","modelValue","multiple","isItemDisabled","disabled","multipleLimit","isItemHovering","scrollToItem","list","resetScrollTop","Item","itemProps","sized","unref","onSelect","onHover","createVNode","groupItem","style","isSelected","isDisabled","isHovering","optionItem","mergeProps","created","default","props2","onKeyboardNavigate","onKeyboardSelect","onForward","onBackward","onEscOrTab","expanded","onKeydown","e","tab","esc","up","enter","aria","EVENT_CODE","preventDefault","stopPropagation","down","height","List","fixedSizeList","dynamicSizeList","b","is","header","_c","empty","be"],"sources":["../../../../../../packages/components/select-v2/src/select-dropdown.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  inject,\n  ref,\n  toRaw,\n  unref,\n  watch,\n} from 'vue'\nimport { get } from 'lodash-unified'\nimport { isObject, isUndefined } from '@element-plus/utils'\nimport {\n  DynamicSizeList,\n  FixedSizeList,\n} from '@element-plus/components/virtual-list'\nimport { useNamespace } from '@element-plus/hooks'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport GroupItem from './group-item.vue'\nimport OptionItem from './option-item.vue'\nimport { useProps } from './useProps'\n\nimport { selectV2InjectionKey } from './token'\n\nimport type { ItemProps } from '@element-plus/components/virtual-list'\nimport type { Option, OptionItemProps } from './select.types'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  props: {\n    loading: Boolean,\n    data: {\n      type: Array,\n      required: true,\n    },\n    hoveringIndex: Number,\n    width: Number,\n  },\n  setup(props, { slots, expose }) {\n    const select = inject(selectV2InjectionKey)!\n    const ns = useNamespace('select')\n    const { getLabel, getValue, getDisabled } = useProps(select.props)\n\n    const cachedHeights = ref<Array<number>>([])\n\n    const listRef = ref()\n\n    const size = computed(() => props.data.length)\n    watch(\n      () => size.value,\n      () => {\n        select.tooltipRef.value.updatePopper?.()\n      }\n    )\n\n    const isSized = computed(() =>\n      isUndefined(select.props.estimatedOptionHeight)\n    )\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight,\n        }\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: (idx: number) => cachedHeights.value[idx],\n      }\n    })\n\n    const contains = (arr: Array<any> = [], target: any) => {\n      const {\n        props: { valueKey },\n      } = select\n\n      if (!isObject(target)) {\n        return arr.includes(target)\n      }\n\n      return (\n        arr &&\n        arr.some((item) => {\n          return toRaw(get(item, valueKey)) === get(target, valueKey)\n        })\n      )\n    }\n    const isEqual = (selected: unknown, target: unknown) => {\n      if (!isObject(target)) {\n        return selected === target\n      } else {\n        const { valueKey } = select.props\n        return get(selected, valueKey) === get(target, valueKey)\n      }\n    }\n\n    const isItemSelected = (modelValue: any[] | any, target: Option) => {\n      if (select.props.multiple) {\n        return contains(modelValue, getValue(target))\n      }\n      return isEqual(modelValue, getValue(target))\n    }\n\n    const isItemDisabled = (modelValue: any[] | any, selected: boolean) => {\n      const { disabled, multiple, multipleLimit } = select.props\n      return (\n        disabled ||\n        (!selected &&\n          (multiple\n            ? multipleLimit > 0 && modelValue.length >= multipleLimit\n            : false))\n      )\n    }\n\n    const isItemHovering = (target: number) => props.hoveringIndex === target\n\n    const scrollToItem = (index: number) => {\n      const list = listRef.value as any\n      if (list) {\n        list.scrollToItem(index)\n      }\n    }\n\n    const resetScrollTop = () => {\n      const list = listRef.value as any\n      if (list) {\n        list.resetScrollTop()\n      }\n    }\n\n    expose({\n      listRef,\n      isSized,\n\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop,\n    })\n\n    const Item = (itemProps: ItemProps<any>) => {\n      const { index, data, style } = itemProps\n      const sized = unref(isSized)\n      const { itemSize, estimatedSize } = unref(listProps)\n      const { modelValue } = select.props\n      const { onSelect, onHover } = select\n      const item = data[index]\n      if (item.type === 'Group') {\n        return (\n          <GroupItem\n            item={item}\n            style={style}\n            height={(sized ? itemSize : estimatedSize) as number}\n          />\n        )\n      }\n\n      const isSelected = isItemSelected(modelValue, item)\n      const isDisabled = isItemDisabled(modelValue, isSelected)\n      const isHovering = isItemHovering(index)\n      return (\n        <OptionItem\n          {...itemProps}\n          selected={isSelected}\n          disabled={getDisabled(item) || isDisabled}\n          created={!!item.created}\n          hovering={isHovering}\n          item={item}\n          onSelect={onSelect}\n          onHover={onHover}\n        >\n          {{\n            default: (props: OptionItemProps) =>\n              slots.default?.(props) || <span>{getLabel(item)}</span>,\n          }}\n        </OptionItem>\n      )\n    }\n\n    // computed\n    const { onKeyboardNavigate, onKeyboardSelect } = select\n\n    const onForward = () => {\n      onKeyboardNavigate('forward')\n    }\n\n    const onBackward = () => {\n      onKeyboardNavigate('backward')\n    }\n\n    const onEscOrTab = () => {\n      select.expanded = false\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      const { code } = e\n      const { tab, esc, down, up, enter } = EVENT_CODE\n      if (code !== tab) {\n        e.preventDefault()\n        e.stopPropagation()\n      }\n\n      switch (code) {\n        case tab:\n        case esc: {\n          onEscOrTab()\n          break\n        }\n        case down: {\n          onForward()\n          break\n        }\n        case up: {\n          onBackward()\n          break\n        }\n        case enter: {\n          onKeyboardSelect()\n          break\n        }\n      }\n    }\n\n    return () => {\n      const { data, width } = props\n      const { height, multiple, scrollbarAlwaysOn } = select.props\n\n      const List = unref(isSized) ? FixedSizeList : DynamicSizeList\n\n      return (\n        <div\n          class={[ns.b('dropdown'), ns.is('multiple', multiple)]}\n          style={{\n            width: `${width}px`,\n          }}\n        >\n          {slots.header?.()}\n          {slots.loading?.() || slots.empty?.() || (\n            <List\n              ref={listRef}\n              {...unref(listProps)}\n              className={ns.be('dropdown', 'list')}\n              scrollbarAlwaysOn={scrollbarAlwaysOn}\n              data={data}\n              height={height}\n              width={width}\n              total={data.length}\n              // @ts-ignore - dts problem\n              onKeydown={onKeydown}\n            >\n              {{\n                default: (props: ItemProps<any>) => <Item {...props} />,\n              }}\n            </List>\n          )}\n          {slots.footer?.()}\n        </div>\n      )\n    }\n  },\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}