{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../components/index.js');\nvar constants = require('../constants.js');\nvar _private = require('../private.js');\nvar utils = require('../utils.js');\nvar headerCell = require('../components/header-cell.js');\nvar sortIcon = require('../components/sort-icon.js');\nconst HeaderCellRenderer = (props, {\n  slots\n}) => {\n  const {\n    column,\n    ns,\n    style,\n    onColumnSorted\n  } = props;\n  const cellStyle = utils.enforceUnit(style);\n  if (column.placeholderSign === _private.placeholderSign) {\n    return vue.createVNode(\"div\", {\n      \"class\": ns.em(\"header-row-cell\", \"placeholder\"),\n      \"style\": cellStyle\n    }, null);\n  }\n  const {\n    headerCellRenderer,\n    headerClass,\n    sortable\n  } = column;\n  const cellProps = {\n    ...props,\n    class: ns.e(\"header-cell-text\")\n  };\n  const columnCellRenderer = utils.componentToSlot(headerCellRenderer);\n  const Cell = columnCellRenderer ? columnCellRenderer(cellProps) : vue.renderSlot(slots, \"default\", cellProps, () => [vue.createVNode(headerCell[\"default\"], cellProps, null)]);\n  const {\n    sortBy,\n    sortState,\n    headerCellProps\n  } = props;\n  let sorting, sortOrder;\n  if (sortState) {\n    const order = sortState[column.key];\n    sorting = Boolean(constants.oppositeOrderMap[order]);\n    sortOrder = sorting ? order : constants.SortOrder.ASC;\n  } else {\n    sorting = column.key === sortBy.key;\n    sortOrder = sorting ? sortBy.order : constants.SortOrder.ASC;\n  }\n  const cellKls = [ns.e(\"header-cell\"), utils.tryCall(headerClass, props, \"\"), column.align === constants.Alignment.CENTER && ns.is(\"align-center\"), column.align === constants.Alignment.RIGHT && ns.is(\"align-right\"), sortable && ns.is(\"sortable\")];\n  const cellWrapperProps = {\n    ...utils.tryCall(headerCellProps, props),\n    onClick: column.sortable ? onColumnSorted : void 0,\n    class: cellKls,\n    style: cellStyle,\n    [\"data-key\"]: column.key\n  };\n  return vue.createVNode(\"div\", vue.mergeProps(cellWrapperProps, {\n    \"role\": \"columnheader\"\n  }), [Cell, sortable && vue.createVNode(sortIcon[\"default\"], {\n    \"class\": [ns.e(\"sort-icon\"), sorting && ns.is(\"sorting\")],\n    \"sortOrder\": sortOrder\n  }, null)]);\n};\nexports[\"default\"] = HeaderCellRenderer;","map":{"version":3,"names":["HeaderCellRenderer","props","column","ns","style","onColumnSorted","cellStyle","utils","enforceUnit","placeholderSign","_private","vue","createVNode","headerCellRenderer","headerClass","cellProps","class","e","columnCellRenderer","componentToSlot","Cell","renderSlot","slots","headerCell","sortState","headerCellProps","sorting","sortOrder","order","key","Boolean","constants","oppositeOrderMap","SortOrder","ASC","sortBy","cellKls","tryCall","align","Alignment","CENTER","is","RIGHT","sortable","cellWrapperProps","mergeProps","sortIcon"],"sources":["../../../../../../../packages/components/table-v2/src/renderers/header-cell.tsx"],"sourcesContent":["import { renderSlot } from 'vue'\nimport { HeaderCell, SortIcon } from '../components'\n// import ColumnResizer from '../table-column-resizer'\nimport { Alignment, SortOrder, oppositeOrderMap } from '../constants'\nimport { placeholderSign } from '../private'\nimport { componentToSlot, enforceUnit, tryCall } from '../utils'\n\nimport type { FunctionalComponent, UnwrapNestedRefs } from 'vue'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { TableV2HeaderRowCellRendererParams } from '../components'\nimport type { UseTableReturn } from '../use-table'\nimport type { TableV2Props } from '../table'\n\nexport type HeaderCellRendererProps = TableV2HeaderRowCellRendererParams &\n  UnwrapNestedRefs<Pick<UseTableReturn, 'onColumnSorted'>> &\n  Pick<TableV2Props, 'sortBy' | 'sortState' | 'headerCellProps'> & {\n    ns: UseNamespaceReturn\n  }\n\nconst HeaderCellRenderer: FunctionalComponent<HeaderCellRendererProps> = (\n  props,\n  { slots }\n) => {\n  const { column, ns, style, onColumnSorted } = props\n\n  const cellStyle = enforceUnit(style)\n\n  if (column.placeholderSign === placeholderSign) {\n    return (\n      <div class={ns.em('header-row-cell', 'placeholder')} style={cellStyle} />\n    )\n  }\n\n  const { headerCellRenderer, headerClass, sortable } = column\n\n  /**\n   * render Cell children\n   */\n\n  const cellProps = {\n    ...props,\n    class: ns.e('header-cell-text'),\n  }\n\n  const columnCellRenderer =\n    componentToSlot<typeof cellProps>(headerCellRenderer)\n\n  const Cell = columnCellRenderer\n    ? columnCellRenderer(cellProps)\n    : renderSlot(slots, 'default', cellProps, () => [\n        <HeaderCell {...cellProps} />,\n      ])\n\n  /**\n   * Render cell container and sort indicator\n   */\n  const { sortBy, sortState, headerCellProps } = props\n\n  let sorting: boolean, sortOrder: SortOrder\n  if (sortState) {\n    const order = sortState[column.key]\n    sorting = Boolean(oppositeOrderMap[order])\n    sortOrder = sorting ? order : SortOrder.ASC\n  } else {\n    sorting = column.key === sortBy.key\n    sortOrder = sorting ? sortBy.order : SortOrder.ASC\n  }\n\n  const cellKls = [\n    ns.e('header-cell'),\n    tryCall(headerClass, props, ''),\n    column.align === Alignment.CENTER && ns.is('align-center'),\n    column.align === Alignment.RIGHT && ns.is('align-right'),\n    sortable && ns.is('sortable'),\n  ]\n\n  const cellWrapperProps = {\n    ...tryCall(headerCellProps, props),\n    onClick: column.sortable ? onColumnSorted : undefined,\n    class: cellKls,\n    style: cellStyle,\n    ['data-key']: column.key,\n  }\n\n  // For now we don't deliver resizable column feature since it has some UX issue.\n  return (\n    <div {...cellWrapperProps} role=\"columnheader\">\n      {Cell}\n\n      {sortable && (\n        <SortIcon\n          class={[ns.e('sort-icon'), sorting && ns.is('sorting')]}\n          sortOrder={sortOrder}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default HeaderCellRenderer\nexport type HeaderCellSlotProps = HeaderCellRendererProps & { class: string }\n"],"mappings":";;;;;;;;;;;;AAKA,MAAAA,kBAAA,GAA0BA,CAAAC,KAAA;;AAc1B,MAAM;EAEF;IACCC,MAAA;IACGC,EAAA;IAAEC,KAAF;IAAUC;MAAVJ,KAAA;EAAqB,MAAAK,SAAA,GAAAC,KAAA,CAAAC,WAAA,CAAAJ,KAAA;EAArB,IAAwCF,MAA9C,CAAAO,eAAA,KAAAC,QAAA,CAAAD,eAAA;IAEA,OAAeE,GAAA,CAAAC,WAAc;;MAEzB,OAAO,EAAPN;IACF;EAAA;QAC8D;IAD9DO,kBAAA;IAGDC,WAAA;;GAEK,GAAAZ,MAAA;QAAAa,SAAA;IAAsB,GAAtBd,KAAA;IAAmCe,KAAA,EAAAb,EAAA,CAAAc,CAAA;EAAnC;EAEN,MAAAC,kBAAA,GAAAX,KAAA,CAAAY,eAAA,CAAAN,kBAAA;EACF,MAAAO,IAAA,GAAAF,kBAAA,GAAAA,kBAAA,CAAAH,SAAA,IAAAJ,GAAA,CAAAU,UAAA,CAAAC,KAAA,aAAAP,SAAA,SAAAJ,GAAA,CAAAC,WAAA,CAAAW,UAAA,aAAAR,SAAA;EACA;;IAEES,SAAe;IAEbC;GAFF,GAAAxB,KAAA;EAKA,IAAAyB,OAAwB,EAAAC,SAAA;EAGxB,IAAMH,SAAO,EAAkB;IAM/B,MAAAI,KAAA,GAAAJ,SAAA,CAAAtB,MAAA,CAAA2B,GAAA;IACFH,OAAA,GAAAI,OAAA,CAAAC,SAAA,CAAAC,gBAAA,CAAAJ,KAAA;IACAD,SAAA,GAAAD,OAAA,GAAAE,KAAA,GAAAG,SAAA,CAAAE,SAAA,CAAAC,GAAA;;IACQR,OAAA,GAAAxB,MAAA,CAAA2B,GAAA,KAAAM,MAAA,CAAAN,GAAA;IAAEF,SAAF,GAAAD,OAAA,GAAAS,MAAA,CAAAP,KAAA,GAAAG,SAAA,CAAAE,SAAA,CAAAC,GAAA;;EAAqB,MAAAE,OAAA,IAAAjC,EAAA,CAAAc,CAAA,iBAAAV,KAAA,CAAA8B,OAAA,CAAAvB,WAAA,EAAAb,KAAA,OAAAC,MAAA,CAAAoC,KAAA,KAAAP,SAAA,CAAAQ,SAAA,CAAAC,MAAA,IAAArC,EAAA,CAAAsC,EAAA,kBAAAvC,MAAA,CAAAoC,KAAA,KAAAP,SAAA,CAAAQ,SAAA,CAAAG,KAAA,IAAAvC,EAAA,CAAAsC,EAAA,iBAAAE,QAAA,IAAAxC,EAAA,CAAAsC,EAAA;EAArB,MAANG,gBAAA;IAEI,GAAArC,KAAA,CAAA8B,OAAA,CAAkBZ,eAAtB,EAAAxB,KAAA;;IACAe,KAAA,EAAAoB,OAAe;IACbhC,KAAA,EAAAE,SAAc;IACd,WAAiB,GAAAJ,MAAA,CAAA2B;EACjB;EACD,OAAMlB,GAAA,CAAAC,WAAA,QAAAD,GAAA,CAAAkC,UAAA,CAAAD,gBAAA;IACL;IACA,EAAS,CAAAxB,IAAA,EAAAuB,QAAA,IAAahC,GAAA,CAAAC,WAAH,CAAAkC,QAAA,WAA2B;IAC/C,UAAA3C,EAAA,CAAAc,CAAA,eAAAS,OAAA,IAAAvB,EAAA,CAAAsC,EAAA;;GAEK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}