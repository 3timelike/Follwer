{"ast":null,"code":"// import request from \"@/utils/index\";\n\n// const {ElMessage} = require(\"element-plus\");\nexport default {\n  name: \"regist\",\n  data() {\n    // 手机号验证\n    const checkPhone = (rule, value, callback) => {\n      const phoneReg = /^1[3|4|5|6|7|8][0-9]{9}$/;\n      if (!value) {\n        return callback(new Error(\"电话号码不能为空\"));\n      }\n      setTimeout(() => {\n        if (!Number.isInteger(+value)) {\n          callback(new Error(\"请输入数字值\"));\n        } else {\n          if (phoneReg.test(value)) {\n            callback();\n          } else {\n            callback(new Error(\"电话号码格式不正确\"));\n          }\n        }\n      }, 100);\n    };\n    //密码验证\n    const checkPass = (rule, value, callback) => {\n      if (!this.editJudge) {\n        console.log(\"验证\");\n        if (value == \"\") {\n          callback(new Error(\"请再次输入密码\"));\n        } else if (value !== this.form.password) {\n          callback(new Error(\"两次输入密码不一致!\"));\n        } else {\n          callback();\n        }\n      } else {\n        console.log(\"不验证\");\n        callback();\n      }\n    };\n    return {\n      howpassword: true,\n      form: {\n        username: \"\",\n        password: \"\",\n        name: \"\",\n        gender: \"\",\n        age: \"\",\n        phone_num: \"\",\n        email: \"\"\n      },\n      rules: {\n        username: [{\n          required: true,\n          message: \"请输入账号\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^[a-zA-Z0-9]{4,9}$/,\n          message: \"必须由 4 到 9 个字母或数字组成\",\n          trigger: \"blur\"\n        }],\n        name: [{\n          required: true,\n          message: \"请输入姓名\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^(?:[\\u4E00-\\u9FA5·]{2,10})$/,\n          message: \"必须由 2 到 10 个汉字组成\",\n          trigger: \"blur\"\n        }],\n        gender: [{\n          required: true,\n          message: \"请选择性别\",\n          trigger: \"change\"\n        }],\n        age: [{\n          required: true,\n          message: \"请输入年龄\",\n          trigger: \"blur\"\n        }, {\n          type: \"number\",\n          message: \"年龄必须为数字值\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^(1|[1-9]\\d?|100)$/,\n          message: \"范围：1-100\",\n          trigger: \"blur\"\n        }],\n        phoneNum: [{\n          required: true,\n          validator: checkPhone,\n          trigger: \"blur\"\n        }],\n        email: [{\n          type: \"email\",\n          message: \"请输入正确的邮箱地址\",\n          trigger: \"blur\"\n        }],\n        password: [{\n          required: true,\n          message: \"请输入密码\",\n          trigger: \"blur\"\n        }, {\n          min: 6,\n          max: 32,\n          message: \"长度在 6 到 16 个字符\",\n          trigger: \"blur\"\n        }],\n        checkPass: [{\n          validator: checkPass,\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  computed: {\n    disabled() {\n      const {\n        username,\n        password,\n        name,\n        gender,\n        age,\n        phone_num,\n        email\n      } = this.form;\n      return Boolean(username && password && name && gender && age && phone_num && email);\n    }\n  },\n  methods: {\n    register() {\n      console.log(this.form);\n      //             this.$refs.form.validate((valid) => {\n      //                 if (valid) {\n      //                     request.post(\"/\" + this.identity + \"/login\", this.form).then((res) => {\n      //                         if (res.code === 200) {\n      //                             console.log(\"chengg\")\n      //                             ElMessage({\n      //                                 message: \"登陆成功\",\n      //                                 type: \"success\",\n      //                             });\n      //                            // 登陆成功跳转主页\n      //                             window.sessionStorage.setItem(\"user\", JSON.stringify(res.data));\n      //                             window.sessionStorage.setItem(\"identity\", JSON.stringify(this.form.identity));\n      //                             this.$router.replace({path: \"/home\"});\n\n      // //   this.$router.push 会向history栈中添加一个新的记录，因此用户可以通过浏览器的后退按钮返回到之前的页面。\n      // // this.$router.replace 会替换当前的history栈中的记录，因此用户无法通过浏览器的后退按钮返回到之前的页面。\n      // // 用途:\n      // // this.$router.push 通常用于实现普通的页面跳转，例如从一个页面跳转到另一个页面。\n      // // this.$router.replace 通常用于实现某些特殊的页面跳转需求，例如在表单提交成功后，将用户重定向到另一个页面，而且用户无法回退到表单提交前的页面\n      //                             console.log(res.data)\n      //                         } else {\n      //                             console.log(\"fail\")\n      //                             console.log(res.message)\n      //                             ElMessage({\n\n      //                                 message: res.message,\n      //                                 type: \"error\",\n      //                             });\n      //                         }\n      //                     });\n      //                 }\n      //             });\n    }\n  }\n};","map":{"version":3,"names":["name","data","checkPhone","rule","value","callback","phoneReg","Error","setTimeout","Number","isInteger","test","checkPass","editJudge","console","log","form","password","howpassword","username","gender","age","phone_num","email","rules","required","message","trigger","pattern","type","phoneNum","validator","min","max","computed","disabled","Boolean","methods","register"],"sources":["C:/Users/zhang/Desktop/myvueeee/flowers/src/assets/js/regist.js"],"sourcesContent":["// import request from \"@/utils/index\";\r\n\r\n// const {ElMessage} = require(\"element-plus\");\r\nexport default {\r\n    name: \"regist\",\r\n    data() {\r\n        // 手机号验证\r\n        const checkPhone = (rule, value, callback) => {\r\n            const phoneReg = /^1[3|4|5|6|7|8][0-9]{9}$/;\r\n            if (!value) {\r\n                return callback(new Error(\"电话号码不能为空\"));\r\n            }\r\n            setTimeout(() => {\r\n                if (!Number.isInteger(+value)) {\r\n                    callback(new Error(\"请输入数字值\"));\r\n                } else {\r\n                    if (phoneReg.test(value)) {\r\n                        callback();\r\n                    } else {\r\n                        callback(new Error(\"电话号码格式不正确\"));\r\n                    }\r\n                }\r\n            }, 100);\r\n        };\r\n        //密码验证\r\n        const checkPass = (rule, value, callback) => {\r\n            if (!this.editJudge) {\r\n                console.log(\"验证\");\r\n                if (value == \"\") {\r\n                    callback(new Error(\"请再次输入密码\"));\r\n                } else if (value !== this.form.password) {\r\n                    callback(new Error(\"两次输入密码不一致!\"));\r\n                } else {\r\n                    callback();\r\n                }\r\n            } else {\r\n                console.log(\"不验证\");\r\n                callback();\r\n            }\r\n        };\r\n        return {\r\n            howpassword: true,\r\n        \r\n            form: {\r\n                username: \"\",\r\n                password: \"\",\r\n                name:\"\",\r\n                gender:\"\",\r\n                age:\"\",\r\n                phone_num:\"\",\r\n                email:\"\",\r\n            },\r\n            rules: {\r\n                username: [\r\n                    {required: true, message: \"请输入账号\", trigger: \"blur\"},\r\n                    {\r\n                        pattern: /^[a-zA-Z0-9]{4,9}$/,\r\n                        message: \"必须由 4 到 9 个字母或数字组成\",\r\n                        trigger: \"blur\",\r\n                    },\r\n                ],\r\n                name: [\r\n                    {required: true, message: \"请输入姓名\", trigger: \"blur\"},\r\n                    {\r\n                        pattern: /^(?:[\\u4E00-\\u9FA5·]{2,10})$/,\r\n                        message: \"必须由 2 到 10 个汉字组成\",\r\n                        trigger: \"blur\",\r\n                    },\r\n                ],\r\n                gender: [{required: true, message: \"请选择性别\", trigger: \"change\"}],\r\n                age: [\r\n                    {required: true, message: \"请输入年龄\", trigger: \"blur\"},\r\n                    {type: \"number\", message: \"年龄必须为数字值\", trigger: \"blur\"},\r\n                    {\r\n                        pattern: /^(1|[1-9]\\d?|100)$/,\r\n                        message: \"范围：1-100\",\r\n                        trigger: \"blur\",\r\n                    },\r\n                ],\r\n                phoneNum: [{required: true, validator: checkPhone, trigger: \"blur\"}],\r\n                email: [\r\n                    {type: \"email\", message: \"请输入正确的邮箱地址\", trigger: \"blur\"},\r\n                ],\r\n                password: [\r\n                    {required: true, message: \"请输入密码\", trigger: \"blur\"},\r\n                    {\r\n                        min: 6,\r\n                        max: 32,\r\n                        message: \"长度在 6 到 16 个字符\",\r\n                        trigger: \"blur\",\r\n                    },\r\n                ],\r\n                checkPass: [{validator: checkPass, trigger: \"blur\"}],\r\n            },\r\n        };\r\n    },\r\n    computed: {\r\n        disabled() {\r\n            const {username, password,name,gender,age,phone_num,email} = this.form;\r\n            return Boolean(username && password && name && gender && age && phone_num && email);\r\n        },\r\n    },\r\n    methods: {\r\n        register() {\r\n            console.log(this.form)\r\n//             this.$refs.form.validate((valid) => {\r\n//                 if (valid) {\r\n//                     request.post(\"/\" + this.identity + \"/login\", this.form).then((res) => {\r\n//                         if (res.code === 200) {\r\n//                             console.log(\"chengg\")\r\n//                             ElMessage({\r\n//                                 message: \"登陆成功\",\r\n//                                 type: \"success\",\r\n//                             });\r\n//                            // 登陆成功跳转主页\r\n//                             window.sessionStorage.setItem(\"user\", JSON.stringify(res.data));\r\n//                             window.sessionStorage.setItem(\"identity\", JSON.stringify(this.form.identity));\r\n//                             this.$router.replace({path: \"/home\"});\r\n                          \r\n// //   this.$router.push 会向history栈中添加一个新的记录，因此用户可以通过浏览器的后退按钮返回到之前的页面。\r\n// // this.$router.replace 会替换当前的history栈中的记录，因此用户无法通过浏览器的后退按钮返回到之前的页面。\r\n// // 用途:\r\n// // this.$router.push 通常用于实现普通的页面跳转，例如从一个页面跳转到另一个页面。\r\n// // this.$router.replace 通常用于实现某些特殊的页面跳转需求，例如在表单提交成功后，将用户重定向到另一个页面，而且用户无法回退到表单提交前的页面\r\n//                             console.log(res.data)\r\n//                         } else {\r\n//                             console.log(\"fail\")\r\n//                             console.log(res.message)\r\n//                             ElMessage({\r\n                                \r\n//                                 message: res.message,\r\n//                                 type: \"error\",\r\n//                             });\r\n//                         }\r\n//                     });\r\n//                 }\r\n//             });\r\n        },\r\n        \r\n    },\r\n};"],"mappings":"AAAA;;AAEA;AACA,eAAe;EACXA,IAAI,EAAE,QAAQ;EACdC,IAAIA,CAAA,EAAG;IACH;IACA,MAAMC,UAAU,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;MAC1C,MAAMC,QAAQ,GAAG,0BAA0B;MAC3C,IAAI,CAACF,KAAK,EAAE;QACR,OAAOC,QAAQ,CAAC,IAAIE,KAAK,CAAC,UAAU,CAAC,CAAC;MAC1C;MACAC,UAAU,CAAC,MAAM;QACb,IAAI,CAACC,MAAM,CAACC,SAAS,CAAC,CAACN,KAAK,CAAC,EAAE;UAC3BC,QAAQ,CAAC,IAAIE,KAAK,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC,MAAM;UACH,IAAID,QAAQ,CAACK,IAAI,CAACP,KAAK,CAAC,EAAE;YACtBC,QAAQ,CAAC,CAAC;UACd,CAAC,MAAM;YACHA,QAAQ,CAAC,IAAIE,KAAK,CAAC,WAAW,CAAC,CAAC;UACpC;QACJ;MACJ,CAAC,EAAE,GAAG,CAAC;IACX,CAAC;IACD;IACA,MAAMK,SAAS,GAAGA,CAACT,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;MACzC,IAAI,CAAC,IAAI,CAACQ,SAAS,EAAE;QACjBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;QACjB,IAAIX,KAAK,IAAI,EAAE,EAAE;UACbC,QAAQ,CAAC,IAAIE,KAAK,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC,MAAM,IAAIH,KAAK,KAAK,IAAI,CAACY,IAAI,CAACC,QAAQ,EAAE;UACrCZ,QAAQ,CAAC,IAAIE,KAAK,CAAC,YAAY,CAAC,CAAC;QACrC,CAAC,MAAM;UACHF,QAAQ,CAAC,CAAC;QACd;MACJ,CAAC,MAAM;QACHS,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;QAClBV,QAAQ,CAAC,CAAC;MACd;IACJ,CAAC;IACD,OAAO;MACHa,WAAW,EAAE,IAAI;MAEjBF,IAAI,EAAE;QACFG,QAAQ,EAAE,EAAE;QACZF,QAAQ,EAAE,EAAE;QACZjB,IAAI,EAAC,EAAE;QACPoB,MAAM,EAAC,EAAE;QACTC,GAAG,EAAC,EAAE;QACNC,SAAS,EAAC,EAAE;QACZC,KAAK,EAAC;MACV,CAAC;MACDC,KAAK,EAAE;QACHL,QAAQ,EAAE,CACN;UAACM,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAM,CAAC,EACnD;UACIC,OAAO,EAAE,oBAAoB;UAC7BF,OAAO,EAAE,oBAAoB;UAC7BC,OAAO,EAAE;QACb,CAAC,CACJ;QACD3B,IAAI,EAAE,CACF;UAACyB,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAM,CAAC,EACnD;UACIC,OAAO,EAAE,8BAA8B;UACvCF,OAAO,EAAE,kBAAkB;UAC3BC,OAAO,EAAE;QACb,CAAC,CACJ;QACDP,MAAM,EAAE,CAAC;UAACK,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAQ,CAAC,CAAC;QAC/DN,GAAG,EAAE,CACD;UAACI,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAM,CAAC,EACnD;UAACE,IAAI,EAAE,QAAQ;UAAEH,OAAO,EAAE,UAAU;UAAEC,OAAO,EAAE;QAAM,CAAC,EACtD;UACIC,OAAO,EAAE,oBAAoB;UAC7BF,OAAO,EAAE,UAAU;UACnBC,OAAO,EAAE;QACb,CAAC,CACJ;QACDG,QAAQ,EAAE,CAAC;UAACL,QAAQ,EAAE,IAAI;UAAEM,SAAS,EAAE7B,UAAU;UAAEyB,OAAO,EAAE;QAAM,CAAC,CAAC;QACpEJ,KAAK,EAAE,CACH;UAACM,IAAI,EAAE,OAAO;UAAEH,OAAO,EAAE,YAAY;UAAEC,OAAO,EAAE;QAAM,CAAC,CAC1D;QACDV,QAAQ,EAAE,CACN;UAACQ,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAM,CAAC,EACnD;UACIK,GAAG,EAAE,CAAC;UACNC,GAAG,EAAE,EAAE;UACPP,OAAO,EAAE,gBAAgB;UACzBC,OAAO,EAAE;QACb,CAAC,CACJ;QACDf,SAAS,EAAE,CAAC;UAACmB,SAAS,EAAEnB,SAAS;UAAEe,OAAO,EAAE;QAAM,CAAC;MACvD;IACJ,CAAC;EACL,CAAC;EACDO,QAAQ,EAAE;IACNC,QAAQA,CAAA,EAAG;MACP,MAAM;QAAChB,QAAQ;QAAEF,QAAQ;QAACjB,IAAI;QAACoB,MAAM;QAACC,GAAG;QAACC,SAAS;QAACC;MAAK,CAAC,GAAG,IAAI,CAACP,IAAI;MACtE,OAAOoB,OAAO,CAACjB,QAAQ,IAAIF,QAAQ,IAAIjB,IAAI,IAAIoB,MAAM,IAAIC,GAAG,IAAIC,SAAS,IAAIC,KAAK,CAAC;IACvF;EACJ,CAAC;EACDc,OAAO,EAAE;IACLC,QAAQA,CAAA,EAAG;MACPxB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,IAAI,CAAC;MAClC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;IACQ;EAEJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}