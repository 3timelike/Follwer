{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nrequire('../../../utils/index.js');\nrequire('../../../hooks/index.js');\nrequire('../../../constants/index.js');\nvar runtime = require('../../../utils/vue/props/runtime.js');\nvar index = require('../../../hooks/use-size/index.js');\nvar index$1 = require('../../../hooks/use-aria/index.js');\nvar event = require('../../../constants/event.js');\nvar shared = require('@vue/shared');\nvar types = require('../../../utils/types.js');\nconst segmentedProps = runtime.buildProps({\n  options: {\n    type: runtime.definePropType(Array),\n    default: () => []\n  },\n  modelValue: {\n    type: [String, Number, Boolean],\n    default: void 0\n  },\n  block: Boolean,\n  size: index.useSizeProp,\n  disabled: Boolean,\n  validateEvent: {\n    type: Boolean,\n    default: true\n  },\n  id: String,\n  name: String,\n  ...index$1.useAriaProps([\"ariaLabel\"])\n});\nconst segmentedEmits = {\n  [event.UPDATE_MODEL_EVENT]: val => shared.isString(val) || types.isNumber(val),\n  [event.CHANGE_EVENT]: val => shared.isString(val) || types.isNumber(val)\n};\nexports.segmentedEmits = segmentedEmits;\nexports.segmentedProps = segmentedProps;","map":{"version":3,"names":["segmentedProps","runtime","buildProps","options","type","definePropType","Array","default","modelValue","String","Number","Boolean","block","size","index","useSizeProp","disabled","validateEvent","id","name","index$1","useAriaProps","segmentedEmits","event","UPDATE_MODEL_EVENT","val","shared","isString","types","isNumber","CHANGE_EVENT"],"sources":["../../../../../../packages/components/segmented/src/segmented.ts"],"sourcesContent":["import {\n  buildProps,\n  definePropType,\n  isNumber,\n  isString,\n} from '@element-plus/utils'\nimport { useAriaProps, useSizeProp } from '@element-plus/hooks'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\n\nimport type { Option } from './types'\nimport type { ExtractPropTypes } from 'vue'\nimport type Segmented from './segmented.vue'\n\nexport const segmentedProps = buildProps({\n  /**\n   * @description options of segmented\n   */\n  options: {\n    type: definePropType<Option[]>(Array),\n    default: () => [],\n  },\n  /**\n   * @description binding value\n   */\n  modelValue: {\n    type: [String, Number, Boolean],\n    default: undefined,\n  },\n  /**\n   * @description fit width of parent content\n   */\n  block: Boolean,\n  /**\n   * @description size of component\n   */\n  size: useSizeProp,\n  /**\n   * @description whether segmented is disabled\n   */\n  disabled: Boolean,\n  /**\n   * @description whether to trigger form validation\n   */\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  /**\n   * @description native input id\n   */\n  id: String,\n  /**\n   * @description native `name` attribute\n   */\n  name: String,\n  ...useAriaProps(['ariaLabel']),\n})\n\nexport type SegmentedProps = ExtractPropTypes<typeof segmentedProps>\n\nexport const segmentedEmits = {\n  [UPDATE_MODEL_EVENT]: (val: any) => isString(val) || isNumber(val),\n  [CHANGE_EVENT]: (val: any) => isString(val) || isNumber(val),\n}\nexport type SegmentedEmits = typeof segmentedEmits\n\nexport type SegmentedInstance = InstanceType<typeof Segmented>\n"],"mappings":";;;;;;;;;;;;;;AAQY,MAACA,cAAc,GAAGC,OAAA,CAAAC,UAAU,CAAC;EACvCC,OAAO,EAAE;IACPC,IAAI,EAAEH,OAAA,CAAAI,cAAc,CAACC,KAAK,CAAC;IAC3BC,OAAO,EAAEA,CAAA,KAAM;EACnB,CAAG;EACDC,UAAU,EAAE;IACVJ,IAAI,EAAE,CAACK,MAAM,EAAEC,MAAM,EAAEC,OAAO,CAAC;IAC/BJ,OAAO,EAAE,KAAK;EAClB,CAAG;EACDK,KAAK,EAAED,OAAO;EACdE,IAAI,EAAEC,KAAA,CAAAC,WAAW;EACjBC,QAAQ,EAAEL,OAAO;EACjBM,aAAa,EAAE;IACbb,IAAI,EAAEO,OAAO;IACbJ,OAAO,EAAE;EACb,CAAG;EACDW,EAAE,EAAET,MAAM;EACVU,IAAI,EAAEV,MAAM;EACZ,GAAGW,OAAA,CAAAC,YAAY,CAAC,CAAC,WAAW,CAAC;AAC/B,CAAC;AACW,MAACC,cAAc,GAAG;EAC5B,CAACC,KAAA,CAAAC,kBAAkB,GAAIC,GAAG,IAAKC,MAAA,CAAAC,QAAQ,CAACF,GAAG,CAAC,IAAIG,KAAA,CAAAC,QAAQ,CAACJ,GAAG,CAAC;EAC7D,CAACF,KAAA,CAAAO,YAAY,GAAIL,GAAG,IAAKC,MAAA,CAAAC,QAAQ,CAACF,GAAG,CAAC,IAAIG,KAAA,CAAAC,QAAQ,CAACJ,GAAG;AACxD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}