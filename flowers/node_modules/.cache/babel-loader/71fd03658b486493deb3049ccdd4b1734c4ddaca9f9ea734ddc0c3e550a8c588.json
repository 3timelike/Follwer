{"ast":null,"code":"import request from \"@/utils/index\";\nconst {\n  ElMessage\n} = require(\"element-plus\");\nexport default {\n  name: \"login\",\n  data() {\n    return {\n      identity: \"\",\n      form: {\n        username: \"\",\n        password: \"\",\n        identity: \"\"\n      },\n      rules: {\n        username: [{\n          required: true,\n          message: \"请输入账号\",\n          trigger: \"blur\"\n        }],\n        password: [{\n          required: true,\n          message: \"请输入密码\",\n          trigger: \"blur\"\n        }],\n        identity: [{\n          required: true,\n          message: \"请选择身份\",\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  computed: {\n    disabled() {\n      const {\n        username,\n        password,\n        identity\n      } = this.form;\n      return Boolean(username && password && identity);\n    }\n  },\n  methods: {\n    login() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          console.log(this.form.username);\n          this.identity = this.form.identity;\n          request.post(\"/\" + this.identity + \"/login\", this.form).then(res => {\n            if (res.code === \"200\") {\n              ElMessage({\n                message: \"登陆成功\",\n                type: \"success\"\n              });\n              // 登陆成功跳转主页\n              // window.sessionStorage.setItem(\"user\", JSON.stringify(res.data));\n              // window.sessionStorage.setItem(\"identity\", JSON.stringify(this.form.identity));\n              // this.$router.replace({path: \"/home\"});\n              console.log(res.data);\n            } else {\n              ElMessage({\n                message: res.msg,\n                type: \"error\"\n              });\n            }\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","ElMessage","require","name","data","identity","form","username","password","rules","required","message","trigger","computed","disabled","Boolean","methods","login","$refs","validate","valid","console","log","post","then","res","code","type","msg"],"sources":["C:/Users/zhang/Desktop/myvueeee/flowers/src/assets/js/login.js"],"sourcesContent":["import request from \"@/utils/index\";\r\n\r\nconst {ElMessage} = require(\"element-plus\");\r\nexport default {\r\n    name: \"login\",\r\n    data() {\r\n        return {\r\n            identity: \"\",\r\n            form: {\r\n                username: \"\",\r\n                password: \"\",\r\n                identity: \"\",\r\n            },\r\n            rules: {\r\n                username: [\r\n                    {required: true, message: \"请输入账号\", trigger: \"blur\"},\r\n                ],\r\n                password: [{required: true, message: \"请输入密码\", trigger: \"blur\"}],\r\n                identity: [{required: true, message: \"请选择身份\", trigger: \"blur\"}],\r\n            },\r\n        };\r\n    },\r\n    computed: {\r\n        disabled() {\r\n            const {username, password, identity} = this.form;\r\n            return Boolean(username && password && identity);\r\n        },\r\n    },\r\n    methods: {\r\n        login() {\r\n            this.$refs.form.validate((valid) => {\r\n                if (valid) {\r\n                    console.log(this.form.username)\r\n                    this.identity = this.form.identity;\r\n                    request.post(\"/\" + this.identity + \"/login\", this.form).then((res) => {\r\n                        if (res.code === \"200\") {\r\n                            ElMessage({\r\n                                message: \"登陆成功\",\r\n                                type: \"success\",\r\n                            });\r\n                            // 登陆成功跳转主页\r\n                            // window.sessionStorage.setItem(\"user\", JSON.stringify(res.data));\r\n                            // window.sessionStorage.setItem(\"identity\", JSON.stringify(this.form.identity));\r\n                            // this.$router.replace({path: \"/home\"});\r\n                            console.log(res.data)\r\n                        } else {\r\n                            ElMessage({\r\n                                message: res.msg,\r\n                                type: \"error\",\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n    },\r\n};"],"mappings":"AAAA,OAAOA,OAAO,MAAM,eAAe;AAEnC,MAAM;EAACC;AAAS,CAAC,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC3C,eAAe;EACXC,IAAI,EAAE,OAAO;EACbC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE;QACFC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZH,QAAQ,EAAE;MACd,CAAC;MACDI,KAAK,EAAE;QACHF,QAAQ,EAAE,CACN;UAACG,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAM,CAAC,CACtD;QACDJ,QAAQ,EAAE,CAAC;UAACE,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAM,CAAC,CAAC;QAC/DP,QAAQ,EAAE,CAAC;UAACK,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAM,CAAC;MAClE;IACJ,CAAC;EACL,CAAC;EACDC,QAAQ,EAAE;IACNC,QAAQA,CAAA,EAAG;MACP,MAAM;QAACP,QAAQ;QAAEC,QAAQ;QAAEH;MAAQ,CAAC,GAAG,IAAI,CAACC,IAAI;MAChD,OAAOS,OAAO,CAACR,QAAQ,IAAIC,QAAQ,IAAIH,QAAQ,CAAC;IACpD;EACJ,CAAC;EACDW,OAAO,EAAE;IACLC,KAAKA,CAAA,EAAG;MACJ,IAAI,CAACC,KAAK,CAACZ,IAAI,CAACa,QAAQ,CAAEC,KAAK,IAAK;QAChC,IAAIA,KAAK,EAAE;UACPC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAChB,IAAI,CAACC,QAAQ,CAAC;UAC/B,IAAI,CAACF,QAAQ,GAAG,IAAI,CAACC,IAAI,CAACD,QAAQ;UAClCL,OAAO,CAACuB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAClB,QAAQ,GAAG,QAAQ,EAAE,IAAI,CAACC,IAAI,CAAC,CAACkB,IAAI,CAAEC,GAAG,IAAK;YAClE,IAAIA,GAAG,CAACC,IAAI,KAAK,KAAK,EAAE;cACpBzB,SAAS,CAAC;gBACNU,OAAO,EAAE,MAAM;gBACfgB,IAAI,EAAE;cACV,CAAC,CAAC;cACF;cACA;cACA;cACA;cACAN,OAAO,CAACC,GAAG,CAACG,GAAG,CAACrB,IAAI,CAAC;YACzB,CAAC,MAAM;cACHH,SAAS,CAAC;gBACNU,OAAO,EAAEc,GAAG,CAACG,GAAG;gBAChBD,IAAI,EAAE;cACV,CAAC,CAAC;YACN;UACJ,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;IACN;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}