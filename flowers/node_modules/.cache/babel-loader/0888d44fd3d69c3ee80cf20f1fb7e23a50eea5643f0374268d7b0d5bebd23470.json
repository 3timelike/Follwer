{"ast":null,"code":"import axios from 'axios';\nconst request = axios.create({\n  baseURL: '/api',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000\n});\nlet token = '';\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n//添加一个请求拦截器\naxios.interceptors.request.use(function (config) {\n  let user = JSON.parse(window.sessionStorage.getItem('access-user'));\n  if (user) {\n    token = user.token;\n  }\n  config.headers.common['token'] = token;\n  //console.dir(config);\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.info(\"error: \");\n  console.info(error);\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\n\n// 以request暴露出去\nexport default request;","map":{"version":3,"names":["axios","request","create","baseURL","timeout","token","interceptors","use","config","user","JSON","parse","window","sessionStorage","getItem","headers","common","error","console","info","Promise","reject","response","res","data","responseType","log"],"sources":["C:/Users/zhang/Desktop/myvueeee/flowers/src/utils/index.js"],"sourcesContent":["\r\nimport axios from 'axios'\r\n\r\nconst request = axios.create({\r\n    baseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n    timeout: 5000\r\n})\r\nlet token = '';\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\n//添加一个请求拦截器\r\naxios.interceptors.request.use(function (config) {\r\n    let user = JSON.parse(window.sessionStorage.getItem('access-user'));\r\n    if (user) {\r\n        token = user.token;\r\n    }\r\n    config.headers.common['token'] = token;\r\n    //console.dir(config);\r\n    return config;\r\n}, function (error) {\r\n    // Do something with request error\r\n    console.info(\"error: \");\r\n    console.info(error);\r\n    return Promise.reject(error);\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// 以request暴露出去\r\nexport default request\r\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EACzBC,OAAO,EAAE,MAAM;EAAG;EAClBC,OAAO,EAAE;AACb,CAAC,CAAC;AACF,IAAIC,KAAK,GAAG,EAAE;AACd;AACA;AACA;AACA;AACAL,KAAK,CAACM,YAAY,CAACL,OAAO,CAACM,GAAG,CAAC,UAAUC,MAAM,EAAE;EAC7C,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;EACnE,IAAIL,IAAI,EAAE;IACNJ,KAAK,GAAGI,IAAI,CAACJ,KAAK;EACtB;EACAG,MAAM,CAACO,OAAO,CAACC,MAAM,CAAC,OAAO,CAAC,GAAGX,KAAK;EACtC;EACA,OAAOG,MAAM;AACjB,CAAC,EAAE,UAAUS,KAAK,EAAE;EAChB;EACAC,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC;EACvBD,OAAO,CAACC,IAAI,CAACF,KAAK,CAAC;EACnB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAhB,OAAO,CAACK,YAAY,CAACgB,QAAQ,CAACf,GAAG,CAC7Be,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAIF,QAAQ,CAACd,MAAM,CAACiB,YAAY,KAAK,MAAM,EAAE;IACzC,OAAOF,GAAG;EACd;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGb,IAAI,CAACC,KAAK,CAACY,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,OAAOA,GAAG;AACd,CAAC,EACDN,KAAK,IAAI;EACLC,OAAO,CAACQ,GAAG,CAAC,KAAK,GAAGT,KAAK,CAAC,EAAC;EAC3B,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,eAAehB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}