{"ast":null,"code":"import request from \"@/utils/index\";\nconst {\n  ElMessage\n} = require(\"element-plus\");\nexport default {\n  name: \"regist\",\n  data() {\n    return {\n      form: {\n        username: \"\",\n        password: \"\",\n        name: \"\",\n        gender: \"\",\n        age: \"\",\n        phone_num: \"\",\n        email: \"\"\n      },\n      rules: {\n        username: [{\n          required: true,\n          message: \"请输入账号\",\n          trigger: \"blur\"\n        }],\n        password: [{\n          required: true,\n          message: \"请输入密码\",\n          trigger: \"blur\"\n        }],\n        identity: [{\n          required: true,\n          message: \"请选择身份\",\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  computed: {\n    disabled() {\n      const {\n        username,\n        password,\n        name,\n        gender,\n        age,\n        phone_num,\n        email\n      } = this.form;\n      return Boolean(username && password && name && gender && age && phone_num && email);\n    }\n  },\n  methods: {\n    register() {\n      //             this.$refs.form.validate((valid) => {\n      //                 if (valid) {\n      //                     request.post(\"/\" + this.identity + \"/login\", this.form).then((res) => {\n      //                         if (res.code === 200) {\n      //                             console.log(\"chengg\")\n      //                             ElMessage({\n      //                                 message: \"登陆成功\",\n      //                                 type: \"success\",\n      //                             });\n      //                            // 登陆成功跳转主页\n      //                             window.sessionStorage.setItem(\"user\", JSON.stringify(res.data));\n      //                             window.sessionStorage.setItem(\"identity\", JSON.stringify(this.form.identity));\n      //                             this.$router.replace({path: \"/home\"});\n\n      // //   this.$router.push 会向history栈中添加一个新的记录，因此用户可以通过浏览器的后退按钮返回到之前的页面。\n      // // this.$router.replace 会替换当前的history栈中的记录，因此用户无法通过浏览器的后退按钮返回到之前的页面。\n      // // 用途:\n      // // this.$router.push 通常用于实现普通的页面跳转，例如从一个页面跳转到另一个页面。\n      // // this.$router.replace 通常用于实现某些特殊的页面跳转需求，例如在表单提交成功后，将用户重定向到另一个页面，而且用户无法回退到表单提交前的页面\n      //                             console.log(res.data)\n      //                         } else {\n      //                             console.log(\"fail\")\n      //                             console.log(res.message)\n      //                             ElMessage({\n\n      //                                 message: res.message,\n      //                                 type: \"error\",\n      //                             });\n      //                         }\n      //                     });\n      //                 }\n      //             });\n    }\n  }\n};","map":{"version":3,"names":["request","ElMessage","require","name","data","form","username","password","gender","age","phone_num","email","rules","required","message","trigger","identity","computed","disabled","Boolean","methods","register"],"sources":["C:/Users/zhang/Desktop/myvueeee/flowers/src/assets/js/regist.js"],"sourcesContent":["import request from \"@/utils/index\";\r\n\r\nconst {ElMessage} = require(\"element-plus\");\r\nexport default {\r\n    name: \"regist\",\r\n    data() {\r\n        return {\r\n            form: {\r\n                username: \"\",\r\n                password: \"\",\r\n                name:\"\",\r\n                gender:\"\",\r\n                age:\"\",\r\n                phone_num:\"\",\r\n                email:\"\",\r\n            },\r\n            rules: {\r\n                username: [\r\n                    {required: true, message: \"请输入账号\", trigger: \"blur\"},\r\n                ],\r\n                password: [{required: true, message: \"请输入密码\", trigger: \"blur\"}],\r\n                identity: [{required: true, message: \"请选择身份\", trigger: \"blur\"}],\r\n            },\r\n        };\r\n    },\r\n    computed: {\r\n        disabled() {\r\n            const {username, password,name,gender,age,phone_num,email} = this.form;\r\n            return Boolean(username && password && name && gender && age && phone_num && email);\r\n        },\r\n    },\r\n    methods: {\r\n        register() {\r\n//             this.$refs.form.validate((valid) => {\r\n//                 if (valid) {\r\n//                     request.post(\"/\" + this.identity + \"/login\", this.form).then((res) => {\r\n//                         if (res.code === 200) {\r\n//                             console.log(\"chengg\")\r\n//                             ElMessage({\r\n//                                 message: \"登陆成功\",\r\n//                                 type: \"success\",\r\n//                             });\r\n//                            // 登陆成功跳转主页\r\n//                             window.sessionStorage.setItem(\"user\", JSON.stringify(res.data));\r\n//                             window.sessionStorage.setItem(\"identity\", JSON.stringify(this.form.identity));\r\n//                             this.$router.replace({path: \"/home\"});\r\n                          \r\n// //   this.$router.push 会向history栈中添加一个新的记录，因此用户可以通过浏览器的后退按钮返回到之前的页面。\r\n// // this.$router.replace 会替换当前的history栈中的记录，因此用户无法通过浏览器的后退按钮返回到之前的页面。\r\n// // 用途:\r\n// // this.$router.push 通常用于实现普通的页面跳转，例如从一个页面跳转到另一个页面。\r\n// // this.$router.replace 通常用于实现某些特殊的页面跳转需求，例如在表单提交成功后，将用户重定向到另一个页面，而且用户无法回退到表单提交前的页面\r\n//                             console.log(res.data)\r\n//                         } else {\r\n//                             console.log(\"fail\")\r\n//                             console.log(res.message)\r\n//                             ElMessage({\r\n                                \r\n//                                 message: res.message,\r\n//                                 type: \"error\",\r\n//                             });\r\n//                         }\r\n//                     });\r\n//                 }\r\n//             });\r\n        },\r\n        \r\n    },\r\n};"],"mappings":"AAAA,OAAOA,OAAO,MAAM,eAAe;AAEnC,MAAM;EAACC;AAAS,CAAC,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC3C,eAAe;EACXC,IAAI,EAAE,QAAQ;EACdC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,IAAI,EAAE;QACFC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZJ,IAAI,EAAC,EAAE;QACPK,MAAM,EAAC,EAAE;QACTC,GAAG,EAAC,EAAE;QACNC,SAAS,EAAC,EAAE;QACZC,KAAK,EAAC;MACV,CAAC;MACDC,KAAK,EAAE;QACHN,QAAQ,EAAE,CACN;UAACO,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAM,CAAC,CACtD;QACDR,QAAQ,EAAE,CAAC;UAACM,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAM,CAAC,CAAC;QAC/DC,QAAQ,EAAE,CAAC;UAACH,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAM,CAAC;MAClE;IACJ,CAAC;EACL,CAAC;EACDE,QAAQ,EAAE;IACNC,QAAQA,CAAA,EAAG;MACP,MAAM;QAACZ,QAAQ;QAAEC,QAAQ;QAACJ,IAAI;QAACK,MAAM;QAACC,GAAG;QAACC,SAAS;QAACC;MAAK,CAAC,GAAG,IAAI,CAACN,IAAI;MACtE,OAAOc,OAAO,CAACb,QAAQ,IAAIC,QAAQ,IAAIJ,IAAI,IAAIK,MAAM,IAAIC,GAAG,IAAIC,SAAS,IAAIC,KAAK,CAAC;IACvF;EACJ,CAAC;EACDS,OAAO,EAAE;IACLC,QAAQA,CAAA,EAAG;MACnB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA;EAGI;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}