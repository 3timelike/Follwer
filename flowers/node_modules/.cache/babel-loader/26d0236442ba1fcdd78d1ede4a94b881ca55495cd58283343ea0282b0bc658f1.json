{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar iconsVue = require('@element-plus/icons-vue');\nvar index$3 = require('../../overlay/index.js');\nrequire('../../focus-trap/index.js');\nrequire('../../dialog/index.js');\nrequire('../../../utils/index.js');\nvar index$4 = require('../../icon/index.js');\nrequire('../../../hooks/index.js');\nvar drawer = require('./drawer.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-deprecated/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar index$2 = require('../../../hooks/use-locale/index.js');\nvar useDialog = require('../../dialog/src/use-dialog.js');\nvar style = require('../../../utils/dom/style.js');\nvar focusTrap = require('../../focus-trap/src/focus-trap.js');\nconst _hoisted_1 = [\"aria-label\", \"aria-labelledby\", \"aria-describedby\"];\nconst _hoisted_2 = [\"id\", \"aria-level\"];\nconst _hoisted_3 = [\"aria-label\"];\nconst _hoisted_4 = [\"id\"];\nconst __default__ = vue.defineComponent({\n  name: \"ElDrawer\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: drawer.drawerProps,\n  emits: drawer.drawerEmits,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const slots = vue.useSlots();\n    index.useDeprecated({\n      scope: \"el-drawer\",\n      from: \"the title slot\",\n      replacement: \"the header slot\",\n      version: \"3.0.0\",\n      ref: \"https://element-plus.org/en-US/component/drawer.html#slots\"\n    }, vue.computed(() => !!slots.title));\n    const drawerRef = vue.ref();\n    const focusStartRef = vue.ref();\n    const ns = index$1.useNamespace(\"drawer\");\n    const {\n      t\n    } = index$2.useLocale();\n    const {\n      afterEnter,\n      afterLeave,\n      beforeLeave,\n      visible,\n      rendered,\n      titleId,\n      bodyId,\n      zIndex,\n      onModalClick,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      onFocusoutPrevented,\n      onCloseRequested,\n      handleClose\n    } = useDialog.useDialog(props, drawerRef);\n    const isHorizontal = vue.computed(() => props.direction === \"rtl\" || props.direction === \"ltr\");\n    const drawerSize = vue.computed(() => style.addUnit(props.size));\n    expose({\n      handleClose,\n      afterEnter,\n      afterLeave\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createBlock(vue.Teleport, {\n        to: \"body\",\n        disabled: !_ctx.appendToBody\n      }, [vue.createVNode(vue.Transition, {\n        name: vue.unref(ns).b(\"fade\"),\n        onAfterEnter: vue.unref(afterEnter),\n        onAfterLeave: vue.unref(afterLeave),\n        onBeforeLeave: vue.unref(beforeLeave),\n        persisted: \"\"\n      }, {\n        default: vue.withCtx(() => [vue.withDirectives(vue.createVNode(vue.unref(index$3.ElOverlay), {\n          mask: _ctx.modal,\n          \"overlay-class\": _ctx.modalClass,\n          \"z-index\": vue.unref(zIndex),\n          onClick: vue.unref(onModalClick)\n        }, {\n          default: vue.withCtx(() => [vue.createVNode(vue.unref(focusTrap[\"default\"]), {\n            loop: \"\",\n            trapped: vue.unref(visible),\n            \"focus-trap-el\": drawerRef.value,\n            \"focus-start-el\": focusStartRef.value,\n            onFocusAfterTrapped: vue.unref(onOpenAutoFocus),\n            onFocusAfterReleased: vue.unref(onCloseAutoFocus),\n            onFocusoutPrevented: vue.unref(onFocusoutPrevented),\n            onReleaseRequested: vue.unref(onCloseRequested)\n          }, {\n            default: vue.withCtx(() => [vue.createElementVNode(\"div\", vue.mergeProps({\n              ref_key: \"drawerRef\",\n              ref: drawerRef,\n              \"aria-modal\": \"true\",\n              \"aria-label\": _ctx.title || void 0,\n              \"aria-labelledby\": !_ctx.title ? vue.unref(titleId) : void 0,\n              \"aria-describedby\": vue.unref(bodyId)\n            }, _ctx.$attrs, {\n              class: [vue.unref(ns).b(), _ctx.direction, vue.unref(visible) && \"open\"],\n              style: vue.unref(isHorizontal) ? \"width: \" + vue.unref(drawerSize) : \"height: \" + vue.unref(drawerSize),\n              role: \"dialog\",\n              onClick: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, [\"stop\"]))\n            }), [vue.createElementVNode(\"span\", {\n              ref_key: \"focusStartRef\",\n              ref: focusStartRef,\n              class: vue.normalizeClass(vue.unref(ns).e(\"sr-focus\")),\n              tabindex: \"-1\"\n            }, null, 2), _ctx.withHeader ? (vue.openBlock(), vue.createElementBlock(\"header\", {\n              key: 0,\n              class: vue.normalizeClass(vue.unref(ns).e(\"header\"))\n            }, [!_ctx.$slots.title ? vue.renderSlot(_ctx.$slots, \"header\", {\n              key: 0,\n              close: vue.unref(handleClose),\n              titleId: vue.unref(titleId),\n              titleClass: vue.unref(ns).e(\"title\")\n            }, () => [!_ctx.$slots.title ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n              key: 0,\n              id: vue.unref(titleId),\n              role: \"heading\",\n              \"aria-level\": _ctx.headerAriaLevel,\n              class: vue.normalizeClass(vue.unref(ns).e(\"title\"))\n            }, vue.toDisplayString(_ctx.title), 11, _hoisted_2)) : vue.createCommentVNode(\"v-if\", true)]) : vue.renderSlot(_ctx.$slots, \"title\", {\n              key: 1\n            }, () => [vue.createCommentVNode(\" DEPRECATED SLOT \")]), _ctx.showClose ? (vue.openBlock(), vue.createElementBlock(\"button\", {\n              key: 2,\n              \"aria-label\": vue.unref(t)(\"el.drawer.close\"),\n              class: vue.normalizeClass(vue.unref(ns).e(\"close-btn\")),\n              type: \"button\",\n              onClick: _cache[0] || (_cache[0] = (...args) => vue.unref(handleClose) && vue.unref(handleClose)(...args))\n            }, [vue.createVNode(vue.unref(index$4.ElIcon), {\n              class: vue.normalizeClass(vue.unref(ns).e(\"close\"))\n            }, {\n              default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.Close))]),\n              _: 1\n            }, 8, [\"class\"])], 10, _hoisted_3)) : vue.createCommentVNode(\"v-if\", true)], 2)) : vue.createCommentVNode(\"v-if\", true), vue.unref(rendered) ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n              key: 1,\n              id: vue.unref(bodyId),\n              class: vue.normalizeClass(vue.unref(ns).e(\"body\"))\n            }, [vue.renderSlot(_ctx.$slots, \"default\")], 10, _hoisted_4)) : vue.createCommentVNode(\"v-if\", true), _ctx.$slots.footer ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n              key: 2,\n              class: vue.normalizeClass(vue.unref(ns).e(\"footer\"))\n            }, [vue.renderSlot(_ctx.$slots, \"footer\")], 2)) : vue.createCommentVNode(\"v-if\", true)], 16, _hoisted_1)]),\n            _: 3\n          }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onFocusoutPrevented\", \"onReleaseRequested\"])]),\n          _: 3\n        }, 8, [\"mask\", \"overlay-class\", \"z-index\", \"onClick\"]), [[vue.vShow, vue.unref(visible)]])]),\n        _: 3\n      }, 8, [\"name\", \"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])], 8, [\"disabled\"]);\n    };\n  }\n});\nvar Drawer = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"drawer.vue\"]]);\nexports[\"default\"] = Drawer;","map":{"version":3,"names":["name","inheritAttrs","slots","vue","useSlots","index","useDeprecated","scope","from","replacement","version","ref","computed","title","drawerRef","focusStartRef","ns","index$1","useNamespace","t","index$2","useLocale","afterEnter","afterLeave","beforeLeave","visible","rendered","titleId","bodyId","zIndex","onModalClick","onOpenAutoFocus","onCloseAutoFocus","onFocusoutPrevented","onCloseRequested","handleClose","useDialog","props","isHorizontal","direction","drawerSize","style","addUnit","size","expose"],"sources":["../../../../../../packages/components/drawer/src/drawer.vue"],"sourcesContent":["<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      :name=\"ns.b('fade')\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n        @click=\"onModalClick\"\n      >\n        <el-focus-trap\n          loop\n          :trapped=\"visible\"\n          :focus-trap-el=\"drawerRef\"\n          :focus-start-el=\"focusStartRef\"\n          @focus-after-trapped=\"onOpenAutoFocus\"\n          @focus-after-released=\"onCloseAutoFocus\"\n          @focusout-prevented=\"onFocusoutPrevented\"\n          @release-requested=\"onCloseRequested\"\n        >\n          <div\n            ref=\"drawerRef\"\n            aria-modal=\"true\"\n            :aria-label=\"title || undefined\"\n            :aria-labelledby=\"!title ? titleId : undefined\"\n            :aria-describedby=\"bodyId\"\n            v-bind=\"$attrs\"\n            :class=\"[ns.b(), direction, visible && 'open']\"\n            :style=\"\n              isHorizontal ? 'width: ' + drawerSize : 'height: ' + drawerSize\n            \"\n            role=\"dialog\"\n            @click.stop\n          >\n            <span ref=\"focusStartRef\" :class=\"ns.e('sr-focus')\" tabindex=\"-1\" />\n            <header v-if=\"withHeader\" :class=\"ns.e('header')\">\n              <slot\n                v-if=\"!$slots.title\"\n                name=\"header\"\n                :close=\"handleClose\"\n                :title-id=\"titleId\"\n                :title-class=\"ns.e('title')\"\n              >\n                <span\n                  v-if=\"!$slots.title\"\n                  :id=\"titleId\"\n                  role=\"heading\"\n                  :aria-level=\"headerAriaLevel\"\n                  :class=\"ns.e('title')\"\n                >\n                  {{ title }}\n                </span>\n              </slot>\n              <slot v-else name=\"title\">\n                <!-- DEPRECATED SLOT -->\n              </slot>\n              <button\n                v-if=\"showClose\"\n                :aria-label=\"t('el.drawer.close')\"\n                :class=\"ns.e('close-btn')\"\n                type=\"button\"\n                @click=\"handleClose\"\n              >\n                <el-icon :class=\"ns.e('close')\"><close /></el-icon>\n              </button>\n            </header>\n            <template v-if=\"rendered\">\n              <div :id=\"bodyId\" :class=\"ns.e('body')\">\n                <slot />\n              </div>\n            </template>\n            <div v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n              <slot name=\"footer\" />\n            </div>\n          </div>\n        </el-focus-trap>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref, useSlots } from 'vue'\nimport { Close } from '@element-plus/icons-vue'\n\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport { useDialog } from '@element-plus/components/dialog'\nimport { addUnit } from '@element-plus/utils'\nimport ElIcon from '@element-plus/components/icon'\nimport { useDeprecated, useLocale, useNamespace } from '@element-plus/hooks'\nimport { drawerEmits, drawerProps } from './drawer'\n\ndefineOptions({\n  name: 'ElDrawer',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(drawerProps)\ndefineEmits(drawerEmits)\nconst slots = useSlots()\n\nuseDeprecated(\n  {\n    scope: 'el-drawer',\n    from: 'the title slot',\n    replacement: 'the header slot',\n    version: '3.0.0',\n    ref: 'https://element-plus.org/en-US/component/drawer.html#slots',\n  },\n  computed(() => !!slots.title)\n)\n\nconst drawerRef = ref<HTMLElement>()\nconst focusStartRef = ref<HTMLElement>()\nconst ns = useNamespace('drawer')\nconst { t } = useLocale()\nconst {\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  visible,\n  rendered,\n  titleId,\n  bodyId,\n  zIndex,\n  onModalClick,\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onFocusoutPrevented,\n  onCloseRequested,\n  handleClose,\n} = useDialog(props, drawerRef)\n\nconst isHorizontal = computed(\n  () => props.direction === 'rtl' || props.direction === 'ltr'\n)\nconst drawerSize = computed(() => addUnit(props.size))\n\ndefineExpose({\n  handleClose,\n  afterEnter,\n  afterLeave,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;uCAkGc;EACZA,IAAM;EACNC,YAAc;AAChB;;;;;;;;;IAIA,MAAMC,KAAA,GAAQC,GAAA,CAAAC,QAAS;IAGrBC,KAAA,CAAAC,aAAA;MACEC,KAAO;MACPC,IAAM;MACNC,WAAa;MACbC,OAAS;MACTC,GAAK;IAAA,GAEPR,GAAA,CAAAS,QAAS,OAAM,CAAC,CAACV,KAAA,CAAMW,KAAK,CAC9B;IAEA,MAAMC,SAAA,GAAYX,GAAA,CAAAQ,GAAiB;IACnC,MAAMI,aAAA,GAAgBZ,GAAA,CAAAQ,GAAiB;IACjC,MAAAK,EAAA,GAAKC,OAAA,CAAAC,YAAA,CAAa,QAAQ;IAC1B;MAAEC;IAAA,IAAMC,OAAA,CAAAC,SAAU;IAClB;MACJC,UAAA;MACAC,UAAA;MACAC,WAAA;MACAC,OAAA;MACAC,QAAA;MACAC,OAAA;MACAC,MAAA;MACAC,MAAA;MACAC,YAAA;MACAC,eAAA;MACAC,gBAAA;MACAC,mBAAA;MACAC,gBAAA;MACAC;IAAA,CACE,GAAAC,SAAA,CAAAA,SAAA,CAAUC,KAAA,EAAOvB,SAAS;IAExB,MAAAwB,YAAA,GAAenC,GAAA,CAAAS,QAAA,CACnB,MAAMyB,KAAA,CAAME,SAAA,KAAc,KAAS,IAAAF,KAAA,CAAME,SAAA,KAAc,KACzD;IACA,MAAMC,UAAA,GAAarC,GAAA,CAAAS,QAAS,OAAM6B,KAAA,CAAAC,OAAQ,CAAAL,KAAA,CAAMM,IAAI,CAAC;IAExCC,MAAA;MACXT,WAAA;MACAb,UAAA;MACAC;IAAA,CACD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}