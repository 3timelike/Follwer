{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar core = require('@vueuse/core');\nrequire('../../../hooks/index.js');\nrequire('../../../utils/index.js');\nvar mask = require('./mask2.js');\nvar content = require('./content2.js');\nvar steps = require('./steps.js');\nvar tour = require('./tour.js');\nvar helper = require('./helper.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar types = require('../../../utils/types.js');\nvar index$1 = require('../../../hooks/use-z-index/index.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElTour\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: tour.tourProps,\n  emits: tour.tourEmits,\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = index.useNamespace(\"tour\");\n    const total = vue.ref(0);\n    const currentStep = vue.ref();\n    const current = core.useVModel(props, \"current\", emit, {\n      passive: true\n    });\n    const currentTarget = vue.computed(() => {\n      var _a;\n      return (_a = currentStep.value) == null ? void 0 : _a.target;\n    });\n    const kls = vue.computed(() => [ns.b(), mergedType.value === \"primary\" ? ns.m(\"primary\") : \"\"]);\n    const mergedPlacement = vue.computed(() => {\n      var _a;\n      return ((_a = currentStep.value) == null ? void 0 : _a.placement) || props.placement;\n    });\n    const mergedContentStyle = vue.computed(() => {\n      var _a, _b;\n      return (_b = (_a = currentStep.value) == null ? void 0 : _a.contentStyle) != null ? _b : props.contentStyle;\n    });\n    const mergedMask = vue.computed(() => {\n      var _a, _b;\n      return (_b = (_a = currentStep.value) == null ? void 0 : _a.mask) != null ? _b : props.mask;\n    });\n    const mergedShowMask = vue.computed(() => !!mergedMask.value && props.modelValue);\n    const mergedMaskStyle = vue.computed(() => types.isBoolean(mergedMask.value) ? void 0 : mergedMask.value);\n    const mergedShowArrow = vue.computed(() => {\n      var _a, _b;\n      return !!currentTarget.value && ((_b = (_a = currentStep.value) == null ? void 0 : _a.showArrow) != null ? _b : props.showArrow);\n    });\n    const mergedScrollIntoViewOptions = vue.computed(() => {\n      var _a, _b;\n      return (_b = (_a = currentStep.value) == null ? void 0 : _a.scrollIntoViewOptions) != null ? _b : props.scrollIntoViewOptions;\n    });\n    const mergedType = vue.computed(() => {\n      var _a, _b;\n      return (_b = (_a = currentStep.value) == null ? void 0 : _a.type) != null ? _b : props.type;\n    });\n    const {\n      nextZIndex\n    } = index$1.useZIndex();\n    const nowZIndex = nextZIndex();\n    const mergedZIndex = vue.computed(() => {\n      var _a;\n      return (_a = props.zIndex) != null ? _a : nowZIndex;\n    });\n    const {\n      mergedPosInfo: pos,\n      triggerTarget\n    } = helper.useTarget(currentTarget, vue.toRef(props, \"modelValue\"), vue.toRef(props, \"gap\"), mergedMask, mergedScrollIntoViewOptions);\n    vue.watch(() => props.modelValue, val => {\n      if (!val) {\n        current.value = 0;\n      }\n    });\n    const onEscClose = () => {\n      if (props.closeOnPressEscape) {\n        emit(\"update:modelValue\", false);\n        emit(\"close\", current.value);\n      }\n    };\n    const onUpdateTotal = val => {\n      total.value = val;\n    };\n    const slots = vue.useSlots();\n    vue.provide(helper.tourKey, {\n      currentStep,\n      current,\n      total,\n      showClose: vue.toRef(props, \"showClose\"),\n      closeIcon: vue.toRef(props, \"closeIcon\"),\n      mergedType,\n      ns,\n      slots,\n      updateModelValue(modelValue) {\n        emit(\"update:modelValue\", modelValue);\n      },\n      onClose() {\n        emit(\"close\", current.value);\n      },\n      onFinish() {\n        emit(\"finish\");\n      },\n      onChange() {\n        emit(\"change\", current.value);\n      }\n    });\n    return (_ctx, _cache) => {\n      var _a, _b;\n      return vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [(vue.openBlock(), vue.createBlock(vue.Teleport, {\n        to: _ctx.appendTo\n      }, [vue.createElementVNode(\"div\", vue.mergeProps({\n        class: vue.unref(kls)\n      }, _ctx.$attrs), [vue.createVNode(mask[\"default\"], {\n        visible: vue.unref(mergedShowMask),\n        fill: (_a = vue.unref(mergedMaskStyle)) == null ? void 0 : _a.color,\n        style: vue.normalizeStyle((_b = vue.unref(mergedMaskStyle)) == null ? void 0 : _b.style),\n        pos: vue.unref(pos),\n        \"z-index\": vue.unref(mergedZIndex),\n        \"target-area-clickable\": _ctx.targetAreaClickable\n      }, null, 8, [\"visible\", \"fill\", \"style\", \"pos\", \"z-index\", \"target-area-clickable\"]), _ctx.modelValue ? (vue.openBlock(), vue.createBlock(content[\"default\"], {\n        key: vue.unref(current),\n        reference: vue.unref(triggerTarget),\n        placement: vue.unref(mergedPlacement),\n        \"show-arrow\": vue.unref(mergedShowArrow),\n        \"z-index\": vue.unref(mergedZIndex),\n        style: vue.normalizeStyle(vue.unref(mergedContentStyle)),\n        onClose: onEscClose\n      }, {\n        default: vue.withCtx(() => [vue.createVNode(vue.unref(steps[\"default\"]), {\n          current: vue.unref(current),\n          onUpdateTotal\n        }, {\n          default: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"default\")]),\n          _: 3\n        }, 8, [\"current\"])]),\n        _: 3\n      }, 8, [\"reference\", \"placement\", \"show-arrow\", \"z-index\", \"style\"])) : vue.createCommentVNode(\"v-if\", true)], 16)], 8, [\"to\"])), vue.createCommentVNode(\" just for IDE \"), false ? vue.renderSlot(_ctx.$slots, \"indicators\", {\n        key: 0,\n        current: vue.unref(current) + 1,\n        total: total.value\n      }) : vue.createCommentVNode(\"v-if\", true)], 64);\n    };\n  }\n});\nvar Tour = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"tour.vue\"]]);\nexports[\"default\"] = Tour;","map":{"version":3,"names":["name","ns","index","useNamespace","total","vue","ref","currentStep","current","core","useVModel","props","emit","passive","currentTarget","computed","_a","value","target","kls","b","mergedType","m","mergedPlacement","placement","mergedContentStyle","_b","contentStyle","mergedMask","mask","mergedShowMask","modelValue","mergedMaskStyle","types","isBoolean","mergedShowArrow","showArrow","mergedScrollIntoViewOptions","scrollIntoViewOptions","type","nextZIndex","index$1","useZIndex","nowZIndex","mergedZIndex","zIndex","mergedPosInfo","pos","triggerTarget","helper","useTarget","toRef","watch","val","onEscClose","closeOnPressEscape","onUpdateTotal"],"sources":["../../../../../../packages/components/tour/src/tour.vue"],"sourcesContent":["<template>\n  <teleport :to=\"appendTo\">\n    <div :class=\"kls\" v-bind=\"$attrs\">\n      <el-tour-mask\n        :visible=\"mergedShowMask\"\n        :fill=\"mergedMaskStyle?.color\"\n        :style=\"mergedMaskStyle?.style\"\n        :pos=\"pos\"\n        :z-index=\"mergedZIndex\"\n        :target-area-clickable=\"targetAreaClickable\"\n      />\n      <el-tour-content\n        v-if=\"modelValue\"\n        :key=\"current\"\n        :reference=\"triggerTarget\"\n        :placement=\"mergedPlacement\"\n        :show-arrow=\"mergedShowArrow\"\n        :z-index=\"mergedZIndex\"\n        :style=\"mergedContentStyle\"\n        @close=\"onEscClose\"\n      >\n        <el-tour-steps :current=\"current\" @update-total=\"onUpdateTotal\">\n          <slot />\n        </el-tour-steps>\n      </el-tour-content>\n    </div>\n  </teleport>\n  <!-- just for IDE -->\n  <slot v-if=\"false\" name=\"indicators\" :current=\"current + 1\" :total=\"total\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, ref, toRef, useSlots, watch } from 'vue'\nimport { useVModel } from '@vueuse/core'\nimport { useNamespace, useZIndex } from '@element-plus/hooks'\nimport { isBoolean } from '@element-plus/utils'\nimport ElTourMask from './mask.vue'\nimport ElTourContent from './content.vue'\nimport ElTourSteps from './steps'\nimport { tourEmits, tourProps } from './tour'\nimport { tourKey, useTarget } from './helper'\nimport type { TourStepProps } from './step'\n\ndefineOptions({\n  name: 'ElTour',\n})\n\nconst props = defineProps(tourProps)\nconst emit = defineEmits(tourEmits)\n\nconst ns = useNamespace('tour')\nconst total = ref(0)\nconst currentStep = ref<TourStepProps>()\n\nconst current = useVModel(props, 'current', emit, {\n  passive: true,\n})\n\nconst currentTarget = computed(() => currentStep.value?.target)\n\nconst kls = computed(() => [\n  ns.b(),\n  mergedType.value === 'primary' ? ns.m('primary') : '',\n])\n\nconst mergedPlacement = computed(\n  () => currentStep.value?.placement || props.placement\n)\n\nconst mergedContentStyle = computed(\n  () => currentStep.value?.contentStyle ?? props.contentStyle\n)\n\nconst mergedMask = computed(() => currentStep.value?.mask ?? props.mask)\nconst mergedShowMask = computed(() => !!mergedMask.value && props.modelValue)\nconst mergedMaskStyle = computed(() =>\n  isBoolean(mergedMask.value) ? undefined : mergedMask.value\n)\n\nconst mergedShowArrow = computed(\n  () =>\n    !!currentTarget.value && (currentStep.value?.showArrow ?? props.showArrow)\n)\n\nconst mergedScrollIntoViewOptions = computed(\n  () => currentStep.value?.scrollIntoViewOptions ?? props.scrollIntoViewOptions\n)\nconst mergedType = computed(() => currentStep.value?.type ?? props.type)\n\nconst { nextZIndex } = useZIndex()\nconst nowZIndex = nextZIndex()\nconst mergedZIndex = computed(() => props.zIndex ?? nowZIndex)\n\nconst { mergedPosInfo: pos, triggerTarget } = useTarget(\n  currentTarget,\n  toRef(props, 'modelValue'),\n  toRef(props, 'gap'),\n  mergedMask,\n  mergedScrollIntoViewOptions\n)\n\nwatch(\n  () => props.modelValue,\n  (val) => {\n    if (!val) {\n      current.value = 0\n    }\n  }\n)\n\nconst onEscClose = () => {\n  if (props.closeOnPressEscape) {\n    emit('update:modelValue', false)\n    emit('close', current.value)\n  }\n}\n\nconst onUpdateTotal = (val: number) => {\n  total.value = val\n}\n\nconst slots = useSlots()\n\nprovide(tourKey, {\n  currentStep,\n  current,\n  total,\n  showClose: toRef(props, 'showClose'),\n  closeIcon: toRef(props, 'closeIcon') as any,\n  mergedType: mergedType as any,\n  ns,\n  slots,\n  updateModelValue(modelValue) {\n    emit('update:modelValue', modelValue)\n  },\n  onClose() {\n    emit('close', current.value)\n  },\n  onFinish() {\n    emit('finish')\n  },\n  onChange() {\n    emit('change', current.value)\n  },\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;uCA2Cc;EACZA,IAAM;AACR;;;;;;;;;IAKM,MAAAC,EAAA,GAAKC,KAAA,CAAAC,YAAA,CAAa,MAAM;IACxB,MAAAC,KAAA,GAAQC,GAAA,CAAAC,GAAA,CAAI,CAAC;IACnB,MAAMC,WAAA,GAAcF,GAAA,CAAAC,GAAmB;IAEvC,MAAME,OAAU,GAAAC,IAAA,CAAAC,SAAA,CAAUC,KAAO,aAAWC,IAAM;MAChDC,OAAS;IAAA,CACV;IAED,MAAMC,aAAgB,GAAAT,GAAA,CAAAU,QAAA,CAAS,MAAM;MAE/B,IAAAC,EAAA;MACJ,OAAK,CAAAA,EAAA,GAAAT,WAAA,CAAAU,KAAA,qBAAAD,EAAA,CAAAE,MAAA;IAAA,EACL;IACF,MAACC,GAAA,GAAAd,GAAA,CAAAU,QAAA,QAEDd,EAAA,CAAAmB,CAAM,IAINC,UAAA,CAAAJ,KAAA,cACE,GAAAhB,EAAA,CAAAqB,CAAA,gBAAyB,CAG3B;IACM,MAAAC,eAAA,GAAAlB,GAAA,CAAAU,QAA0B,CAAM,MAAC;MACjC,IAAAC,EAAA;MAIA,SAAAA,EAAA,GAAAT,WACJ,CAAAU,KAAA,SACkB,YAAAD,EAAA,CAAAQ,SAAsB,KAAAb,KAAA,CAAAa,SAAoB;IAG9D;IAGA,MAAMC,kBAAsB,GAAApB,GAAA,CAAAU,QAAA;MAEtB,IAAAC,EAAE,EAAAU,EAAA;MACR,QAAAA,EAAA,IAAAV,EAAkB,GAAWT,WAAA,CAAAU,KAAA,qBAAAD,EAAA,CAAAW,YAAA,YAAAD,EAAA,GAAAf,KAAA,CAAAgB,YAAA;IAC7B;IAEA,MAAMC,UAAE,GAAAvB,GAAA,CAAAU,QAAoB;MAQ5B,IACEC,EAAM,EAAAU,EAAA;MAEJ,OAAU,CAAAA,EAAA,IAAAV,EAAA,GAAAT,WAAA,CAAAU,KAAA,qBAAAD,EAAA,CAAAa,IAAA,YAAAH,EAAA,GAAAf,KAAA,CAAAkB,IAAA;IACR;IACF,MAAAC,cAAA,GAAAzB,GAAA,CAAAU,QAAA,SAAAa,UAAA,CAAAX,KAAA,IAAAN,KAAA,CAAAoB,UAAA;IACF,MACFC,eAAA,GAAA3B,GAAA,CAAAU,QAAA,OAAAkB,KAAA,CAAAC,SAAA,CAAAN,UAAA,CAAAX,KAAA,aAAAW,UAAA,CAAAX,KAAA;IAEA,MAAMkB,eAAmB,GAAA9B,GAAA,CAAAU,QAAA;MACvB,IAAIC,EAAA,EAAAU,EAAM;MACR,OAAK,EAAAZ,aAAA,CAAAG,KAAqB,KAAK,CAAAS,EAAA,IAAAV,EAAA,GAAAT,WAAA,CAAAU,KAAA,qBAAAD,EAAA,CAAAoB,SAAA,YAAAV,EAAA,GAAAf,KAAA,CAAAyB,SAAA;IAC/B,CAAK;IACP,MAAAC,2BAAA,GAAAhC,GAAA,CAAAU,QAAA;MACF,IAAAC,EAAA,EAAAU,EAAA;MAEM,QAAAA,EAAA,IAAAV,EAAA,GAAAT,WAAiC,CAAAU,KAAA,qBAAAD,EAAA,CAAAsB,qBAAA,YAAAZ,EAAA,GAAAf,KAAA,CAAA2B,qBAAA;IACrC;IACF,MAAAjB,UAAA,GAAAhB,GAAA,CAAAU,QAAA;MAEA,IAAMC,EAAA,EAAAU,EAAA;MAEN,OAAiB,CAAAA,EAAA,IAAAV,EAAA,GAAAT,WAAA,CAAAU,KAAA,qBAAAD,EAAA,CAAAuB,IAAA,YAAAb,EAAA,GAAAf,KAAA,CAAA4B,IAAA;IAAA,CACf;IACA;MAAAC;IAAA,IAAAC,OAAA,CAAAC,SAAA;IACA,MAAAC,SAAA,GAAAH,UAAA;IACA,MAAAI,YAAiB,GAAAvC,GAAA,CAAAU,QAAkB;MACnC,IAAAC,EAAA;MACA,QAAAA,EAAA,GAAAL,KAAA,CAAAkC,MAAA,YAAA7B,EAAA,GAAA2B,SAAA;IAAA,CACA;IACA;MAAAG,aAAA,EAAAC,GAAA;MAAAC;IAAA,IAAAC,MAAA,CAAAC,SAAA,CAAApC,aAAA,EAAAT,GAAA,CAAA8C,KAAA,CAAAxC,KAAA,iBAAAN,GAAA,CAAA8C,KAAA,CAAAxC,KAAA,UAAAiB,UAAA,EAAAS,2BAAA;IAAAhC,GAAA,CAAA+C,KAAA,OAAAzC,KAAA,CAAAoB,UAC6B,EAAAsB,GAAA;MAC3B,KAAAA,GAAA;QACF7C,OAAA,CAAAS,KAAA;MAAA;IAEE,CAAK;IACP,MAAAqC,UAAA,GAAAA,CAAA;MACA,IAAW3C,KAAA,CAAA4C,kBAAA;QACT3C,IAAA,CAAK,mBAAQ;QACfA,IAAA,UAAAJ,OAAA,CAAAS,KAAA;MAAA;IAEE,CAAK;IACP,MAAAuC,aAAA,GAAAH,GAAA;MACDjD,KAAA,CAAAa,KAAA,GAAAoC,GAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}